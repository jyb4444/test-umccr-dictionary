{"version":3,"sources":["serviceWorker.js","DataDictionary/action.js","DataDictionary/utils.js","DataDictionary/NodeCategories/icons/icon_administrative.svg","DataDictionary/NodeCategories/icons/icon_analysis.svg","DataDictionary/NodeCategories/icons/icon_biospecimen.svg","DataDictionary/NodeCategories/icons/icon_clinical.svg","DataDictionary/NodeCategories/icons/icon_clinical_assessment.svg","DataDictionary/NodeCategories/icons/icon_data_file.svg","DataDictionary/NodeCategories/icons/icon_metadata.svg","DataDictionary/NodeCategories/icons/icon_notation.svg","DataDictionary/NodeCategories/icons/icon_index_file.svg","DataDictionary/NodeCategories/icons/icon_data_observations.svg","DataDictionary/NodeCategories/icons/icon_default.svg","DataDictionary/NodeCategories/icons/icon_experimental_methods.svg","DataDictionary/NodeCategories/icons/icon_subject_characteristics.svg","DataDictionary/NodeCategories/icons/icon_imaging.svg","DataDictionary/NodeCategories/icons/icon_study_administration.svg","DataDictionary/NodeCategories/helper.js","utils.js","DataDictionary/highlightHelper.jsx","DataDictionary/table/DataDictionaryPropertyTable/index.jsx","DataDictionary/table/DataDictionaryNode/index.jsx","DataDictionary/table/DataDictionaryCategory/index.jsx","DataDictionary/table/DataDictionaryTable/DataDictionaryTable.jsx","DataDictionary/table/DataDictionaryTable/index.js","DataDictionary/DataModelStructure/DataModelStructure.jsx","DataDictionary/DataModelStructure/index.js","GraphUtils/utils.js","DataDictionary/graph/GraphCalculator/graphStructureHelper.js","DataDictionary/graph/GraphCalculator/graphCalculatorHelper.js","DataDictionary/graph/GraphCalculator/GraphCalculator.jsx","DataDictionary/graph/GraphCalculator/index.js","DataDictionary/graph/Legend/Legend.jsx","DataDictionary/graph/Legend/index.js","DataDictionary/graph/Canvas/Canvas.jsx","DataDictionary/graph/Canvas/index.js","DataDictionary/graph/GraphNode/GraphNode.jsx","DataDictionary/graph/GraphEdge/GraphEdge.jsx","DataDictionary/graph/GraphDrawer/GraphDrawer.jsx","DataDictionary/graph/GraphDrawer/index.js","DataDictionary/graph/NodeTooltip/NodeTooltip.jsx","DataDictionary/graph/NodeTooltip/index.js","DataDictionary/graph/NodePopup/NodePopup.jsx","DataDictionary/graph/NodePopup/index.js","DataDictionary/graph/OverlayPropertyTable/OverlayPropertyTable.jsx","DataDictionary/graph/OverlayPropertyTable/index.js","DataDictionary/graph/ActionLayer/ActionLayer.jsx","DataDictionary/graph/ActionLayer/index.js","DataDictionary/graph/DataDictionaryGraph/index.jsx","DataDictionary/search/DictionarySearcher/searchHelper.js","DataDictionary/search/DictionarySearcher/DictionarySearcher.jsx","DataDictionary/search/DictionarySearcher/index.js","DataDictionary/search/DictionarySearchHistory/DictionarySearchHistory.jsx","DataDictionary/search/DictionarySearchHistory/index.js","DataDictionary/DataDictionary.jsx","DataDictionary/index.jsx","DataDictionary/reducers.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","hoverNode","nodeID","type","setOverlayPropertyTableHidden","isHidden","setGraphView","isGraphView","setNeedReset","needReset","setHighlightingMatchedNodeOpened","opened","concatTwoWords","w1","w2","length","getType","property","enum","oneOf","map","item","reduce","flatList","it","Array","isArray","concat","push","anyOf","downloadTemplate","format","nodeId","templatePath","open","graphStyleConfig","parseDictionaryNodes","dictionary","Object","keys","filter","id","charAt","node","category","getPropertyDescription","description","term","getSearchHistoryItems","JSON","parse","localStorage","getItem","addSearchHistoryItems","searchHistoryItem","keywordStr","prevHistory","newHistory","slice","find","index","findIndex","splice","unshift","setItem","stringify","clearSearchHistoryItems","MatchedIndicesShape","PropTypes","arrayOf","number","MatchedItemShape","shape","indices","arrayIndex","key","string","value","SearchItemPropertyShape","name","oneOfType","SearchItemShape","title","properties","matches","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","styles","props","createElement","width","height","xmlns","fillRule","fill","d","nodeCategoryList","clinical","icon","IconClinical","color","biospecimen","data_file","metadata_file","transform","rx","y","analysis","administrative","notation","stroke","strokeLinecap","index_file","cx","cy","r","clinical_assessment","xmlnsXlink","xlinkHref","medical_history","data_observations","experimental_methods","subject_characteristics","imaging","study_administration","defaultCategory","getCategoryIconSVG","getCategoryColor","capitalizeFirstLetter","str","replace","txt","toUpperCase","substr","toLowerCase","intersection","aList","bList","key2Count","db","res","entries","kv","escapeReturnChar","newlineClassName","pieces","split","piece","className","addHighlightingSpans","spanClassName","cursor","currentIndices","resultFragments","highlightSpanClassName","substring","getNodeTitleFragment","allMatches","matchedItem","getNodeDescriptionFragment","getMatchesSummaryForProperties","allProperties","matchedPropertiesSummary","forEach","propertyKey","propertyIndex","nameMatch","descriptionMatch","typeMatchList","descriptionStr","includes","getMatchInsideProperty","summaryItem","DataDictionaryPropertyTable","borderModifier","hasBorder","propertyKeysList","hideIsRequired","sort","k1","k2","required1","requiredProperties","required2","onlyShowMatchedProperties","needHighlightSearchResult","matchedResult","matchedSummaryItem","termID","termLink","termDef","cde_id","term_url","propertyNameFragment","propertyTypeFragment","t","matchedTypeItem","matchItem","getPropertyTypeFragment","propertyDescriptionFragment","getPropertyDescriptionFragment","isRequired","href","React","Component","defaultProps","DataDictionaryNode","handleCloseNode","onExpandNode","handleDownloadTemplate","e","stopPropagation","expanded","Fragment","style","borderLeftColor","onClick","handleClickNode","onKeyPress","role","tabIndex","label","rightIcon","buttonType","required","DataDictionaryCategory","IconSVG","nodes","highlightingNodeID","DataDictionaryTable","dictionaryName","c2nl","lookup","category2NodeList","acc","nodesCount","propertiesCount","getNodePropertyCount","ReduxDataDictionaryTable","connect","state","submission","ddgraph","tableExpandNodeID","dispatch","setExpandNode","DataModelStructure","handleClickGraphButton","onSetGraphView","onResetGraphCanvas","handleClickOverlayPropertyButton","onSetOverlayPropertyTableHidden","overlayPropertyHidden","downloadTemplatesEnabled","relatedNodeIDs","excludedNodesForTemplates","handleDownloadAllTemplates","nodesToDownload","nid","allRoutes","nodeIDsInRoute","downloadMultiTemplate","clickingNodeName","dictionaryVersion","dataModelStructure","entry","nodeIDsBefore","linksBefore","lastNodeModifier","Button","Menu","Item","zip","JSZip","Promise","all","fileUrl","saveAsFileName","fetch","then","response","ok","text","Error","responseText","file","catch","time","Date","readmeContent","toLocaleDateString","toLocaleTimeString","routeIndex","join","generateAsync","content","FileSaver","saveAs","ReduxDataModelStructure","dataModelStructureRelatedNodeIDs","dataModelStructureAllRoutesBetween","highlightingNode","versionInfo","hidden","getSubgroupLinks","link","nameToNode","sourceId","subgroupLinks","subgroup","sgLink","target_type","exists","getTreeHierarchy","root","name2EdgesIn","getTreeHierarchyHelper","hierarchy","descendants","Set","add","set","edge","sourceName","get","n","Map","assignNodePositions","edges","opts","breadthFirstInfo","result","bfOrder","treeLevel2Names","name2Level","targetName","console","error","emptyDb","couldBeRoot","rootNode","findRoot","log","processedNodes","queue","query","level","name2ActualLvl","head","has","nodesBreadthFirst","name2Node","row2Names","numPerRow","lastRow","numLevels","nodesAtLevel","numNodesAtLevel","nodeName","posAtLevel","position","positionIndex","getAllChildrenNodeIDs","startingNodeID","wholeGraphNodes","currentLevelNodeIDs","outLinks","nextLevelNodeIDs","outNodeId","getAllChildrenLinks","startingNode","relatedLinks","outID","sourceNodeHistory","nextLevel","j","outNodeID","inOrOutLinksFromGivenNode","inOrOut","subgraphNodeIDs","subgraphEdges","links","inLinks","neighborNodeID","inLinksFilterFunc","outLinksFilterFunc","getNodeIDsThatHaveNoInOrOutLinks","resultIDs","getArticulationNodesInSubgraph","articulationNodeIDs","targetNodeID","nodeIdsWithoutInLinks","nodeIDsInSubgraphWithoutTargetNode","inNeighbors","inNodeID","outNeighbors","isArticulationNodeInSubgraph","BFSTraverseSubgraph","alongLinkDirection","resultNodeIDs","linkNeighbors","getNodesAndLinksSummaryBetweenNodesInSubgraph","endingNodeID","betweenNodeIDs","firstLevelOutNodeIDs","betweenLinks","outNOdeIDsInSubgraph","nodeIDs","getAllRoutesBetweenTwoNodes","resultRoutes","takeOneStep","curID","curPath","resultPath","from","reverse","oid","delete","calculateGraphLayout","countsSearch","linksSearch","createAll","nodesToHide","startsWith","count","counts_search","hideDb","list","newLinks","sgLinks","links_search","undefined","createNodesAndEdges","dotString","graphString","IDsInThisLevel","buildGraphVizDOTString","createDotStrinByNodesEdges","Viz","Module","render","renderJSONObject","renderedJSON","renderedNodes","objects","rank","boundingBox","_draw_","points","cur","x1","y1","x2","y2","Infinity","iconRadius","topCenterX","topCenterY","originNode","nodeType","nodeColor","textPadding","fontSize","textLineGap","nodeNames","maxCharInRow","breakwordMinLength","wordsList","currentLine","breakPos","nextBreakPos","truncateLines","rectMinHeight","rectHeight","Math","max","requiredPropertiesCount","optionalPropertiesCount","nodeLevel","names","_gvid","renderedEdges","controlPoints","pathString","pair","sourceNode","tail","targetNode","sourePosition","targetPosition","graphBoundingBox","op","calculateHighlightRelatedNodeIDs","calculatePathRelatedToSecondHighlightingNode","secondHighlightingNodeID","pathRelatedToSecondHighlightingNode","calculateDataModelStructure","unsortedCriticalNodeIDs","sortedCriticalNodeIDs","nodeIDsToSort","sortNodesByTopology","resultCriticalNodeIDs","singleDescendentNodeID","getSingleEndDescendentNodeID","resultStructure","routesBetweenStartEndNodes","lastCriticalNodeID","nodeIDsBeforeNode","linksBeforeNode","GraphCalculator","oldHighlightingNode","oldSecondHighlightingNodeID","layoutInitialized","layoutResult","onGraphLayoutCalculated","legendItems","types","_","uniq","getAllTypes","onGraphLegendCalculated","nextProps","newHighlightingNode","newSecondHighlightingNodeID","relatedHighlightedNodeIDs","onHighlightRelatedNodesCalculated","secondHighlightingNodeCandidateIDs","onSecondHighlightingNodeCandidateIDsCalculated","onPathRelatedToSecondHighlightingNodeCalculated","getDataModelStructureForSecondHighlightingNodes","onDataModelStructureCalculated","getDataModelStructureForHighlightedNodes","ReduxGraphCalculator","layout","setGraphLayout","setGraphLegend","setRelatedNodeIDs","setSecondHighlightingNodeCandidateIDs","setPathRelatedToSecondHighlightingNode","setDataModelStructure","Legend","toggleLegend","setState","show","items","itemColor","IconSvg","backgroundColor","ReduxLegend","d3","select","zoom","zoomTransform","zoomIdentity","transition","easeLinear","event","Canvas","handleResize","updateCanvasSize","handleCanvasUpdate","canvasBoundingRect","canvasElement","current","getBoundingClientRect","onCanvasBoundingBoxUpdate","handleClick","onClickBlankSpace","zoomAction","k","zoomCatcher","translateSign","zoomBehavior","translate","canvasWidth","abs","canvasHeight","scale","handleZoomIn","handleZoomOut","handleReset","createRef","svgElement","containerElement","duration","ease","scaleExtent","minZoom","maxZoom","translateExtent","topLeftTranslateLimit","bottomRightTranslateLimit","on","zoomTarget","attr","addEventListener","onResetCanvasFinished","removeEventListener","clientWidth","clientHeight","ref","Children","children","child","cloneElement","ReduxCanvas","setCanvasBoundingRect","GraphNode","nodeFadedClassModifier","isFaded","nodeHalfFadedClassModifier","isHalfFaded","nodeDashedClassModifier","isDashed","nodeClickableClassModifier","isClickable","nodeIsCurrentHighlightingClassModifier","isHighlightingNode","onMouseOver","onMouseOut","x","ry","matchedNodeNameIndices","rowEndIndex","nodeTitleFragment","currentRowIndex","rowStartIndex","nodeNameRows","currentHighlightIndex","textAttrBase","textAnchor","alignmentBaseline","tspanAttrBase","tspanAttr","tspanHighlightAttr","currentRowStr","textY","textAttr","cursorInRow","currentRowFragment","highlightStartIndex","highlightEndIndex","highlightStartIndexInRow","highlightEndIndexInRow","lenght","getNodeTitleSVGFragment","GraphEdge","edgeRequiredClassModifier","edgeFadedClassModifier","edgeHalfFadedClassModifier","edgeHighlightedClassModifier","isHighlighted","GraphDrawer","onMouseOverNode","onHoverNode","onMouseOutNode","onCancelHoverNode","onClickNode","getNodeRef","graphNodeRefs","graphDomRef","nodeSVGElementInitialized","graphNodesSVGElements","getSVGElement","onGraphNodesSVGElementsUpdated","boundingBoxLength","fittingScale","min","fittingTransX","fittingTransY","isNaN","isEdgeFaded","isEdgeHalfFaded","isEdgeHighlighted","isSearchMode","isEdgeRelatedToHighlightedNode","isEdgeAlongPathRelatedToSecondHighlightNode","isNodeFaded","isNodeClickable","isNodeHalfFaded","isNodeDashed","matchedNodeIDs","matchedNodeIDsInNameAndDescription","searchResult","ReduxGraphDrawer","clickNode","setGraphNodesSVGElements","NodeTooltip","hoveringNode","hoveringNodeSVGElement","svgBoundingBox","top","left","tooltipLeft","tooltipBottom","innerHeight","bottom","ReduxNodeTooltip","NodePopup","handleClickPropertyButton","onOpenOverlayPropertyTable","highlightingNodeSVGElement","popupLeft","popupTop","onClosePopup","ReduxNodePopup","OverlayPropertyTable","getTitle","getDescription","handleClose","onCloseOverlayPropertyTable","handleOpenAllProperties","onOpenMatchedProperties","handleDisplayOnlyMatchedProperties","onCloseMatchedProperties","searchedNodeNotOpened","isSearchResultNodeOpened","getNode","highlightingMatchedNodeID","getSearchResultItem","resItem","ReduxOverlayPropertyTable","highlightingMatchedNodeOpened","ActionLayer","handleClearSearch","onClearSearchResult","ReduxActionLayer","DataDictionaryGraph","searchKeyword","searchData","keyword","errorMsg","halfLength","round","options","includeMatches","threshold","shouldSort","includeScore","minMatchCharLength","Fuse","search","DictionarySearcher","onClearResult","resetSearchResult","autoCompleteRef","clearInput","launchClearSearchFromOutside","launchSearchFromOutside","setInputText","setIsSearching","onSearchResultUpdated","isSearchFinished","hasError","suggestionList","summary","matchedNodeIDsInProperties","generalMatchedNodeIDs","matchedPropertiesCount","matchedNodeNameAndDescriptionsCount","getSearchSummary","matchedNodes","onSearchHistoryItemCreated","matchedCount","onSaveCurrentSearchKeyword","onSearchResultCleared","inputChangeFunc","inputText","onStartSearching","matchedStrings","matchedPieceIndices","arr","str1","str2","compareTwoStrings","fullString","suggestionItemClickFunc","suggestionItem","submitInputFunc","currentSearchKeyword","inputPlaceHolderText","onSuggestionItemClick","onInputChange","onSubmitInput","ReduxDictionarySearcher","isSearching","searchResultSummary","addSearchHistoryItem","saveCurrentSearchKeyword","withRef","DictionarySearchHistory","onClickSearchHistoryItem","handleClearHistory","onClearSearchHistoryItems","searchHistoryItems","zeroCountModifier","ReduxDictionarySearchHistory","DataDictionary","handleClickSearchHistoryItem","dictionarySearcherRef","getWrappedInstance","handleClearSearchResult","ReduxDataDictionary","ddgraphInitialState","action","newHoveringNode","newTableExpandNodeID","getFileNodes","getNodeTypes","excludeSystemProperties","systemProperties","getDictionaryWithExcludeSystemProperties","reducers","combineReducers","file_type","formSchema","projects","data","p","code","project_id","projectAvail","availability_type","nodeTypes","file_nodes","oauth_url","url","login","prevCounts","submit_entity_counts","newCounts","entities","ent","submit_result","status","submit_status","submit_result_string","submit_counter","submit_total","total","search_form","search_result","search_status","unmappedFiles","unmappedFileCount","unmappedFileSize","totalSize","filesToMap","version","apiVersion","findObjectWithRef","obj","updateFn","root_key","propertyName","a","store","createStore","hash","json","schema","dict","refObj","rootKey","$RefParser","dereference","continueOnError","circular","newDict","ReactDOM","StrictMode","document","getElementById","init","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.45073f97.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const clickBlankSpace = () => ({\n  type: 'GRAPH_CLICK_BLANK_SPACE',\n});\n\nexport const setCanvasBoundingRect = canvasBoundingRect => ({\n  type: 'GRAPH_UPDATE_CANVAS_BOUNDING_RECT',\n  canvasBoundingRect,\n});\n\nexport const setSecondHighlightingNodeCandidateIDs = secondHighlightingNodeCandidateIDs => ({\n  type: 'GRAPH_UPDATE_SECOND_HIGHLIGHTING_NODE_CANDIDATES',\n  secondHighlightingNodeCandidateIDs,\n});\n\nexport const setPathRelatedToSecondHighlightingNode = pathRelatedToSecondHighlightingNode => ({\n  type: 'GRAPH_UPDATE_PATH_RELATED_TO_SECOND_HIGHLIGHTING_NODE',\n  pathRelatedToSecondHighlightingNode,\n});\n\nexport const setDataModelStructure = (\n  dataModelStructure,\n  dataModelStructureRelatedNodeIDs,\n  routesBetweenStartEndNodes,\n) => ({\n  type: 'GRAPH_UPDATE_DATA_MODEL_STRUCTURE',\n  dataModelStructure,\n  dataModelStructureRelatedNodeIDs,\n  routesBetweenStartEndNodes,\n});\n\nexport const setRelatedNodeIDs = relatedNodeIDs => ({\n  type: 'GRAPH_UPDATE_RELATED_HIGHLIGHTING_NODE',\n  relatedNodeIDs,\n});\n\nexport const setGraphLayout = layout => ({\n  type: 'GRAPH_LAYOUT_CALCULATED',\n  nodes: layout.nodes,\n  edges: layout.edges,\n  graphBoundingBox: layout.graphBoundingBox,\n});\n\nexport const setGraphLegend = legendItems => ({\n  type: 'GRAPH_LEGEND_CALCULATED',\n  legendItems,\n});\n\nexport const hoverNode = nodeID => ({\n  type: 'GRAPH_UPDATE_HOVERING_NODE',\n  nodeID,\n});\n\nexport const clickNode = nodeID => ({\n  type: 'GRAPH_CLICK_NODE',\n  nodeID,\n});\n\nexport const resetGraphHighlight = () => ({\n  type: 'GRAPH_RESET_HIGHLIGHT',\n});\n\nexport const setOverlayPropertyTableHidden = isHidden => ({\n  type: 'GRAPH_SET_OVERLAY_PROPERTY_TABLE_HIDDEN',\n  isHidden,\n});\n\nexport const setExpandNode = nodeID => ({\n  type: 'TABLE_EXPAND_NODE',\n  nodeID,\n});\n\nexport const setGraphView = isGraphView => ({\n  type: 'TOGGLE_GRAPH_TABLE_VIEW',\n  isGraphView,\n});\n\nexport const setNeedReset = needReset => ({\n  type: 'GRAPH_CANVAS_RESET_REQUIRED',\n  needReset,\n});\n\nexport const setIsSearching = isSearching => ({\n  type: 'SEARCH_SET_IS_SEARCHING_STATUS',\n  isSearching,\n});\n\nexport const setSearchResult = (searchResult, searchResultSummary) => ({\n  type: 'SEARCH_RESULT_UPDATED',\n  searchResult,\n  searchResultSummary,\n});\n\nexport const clearSearchHistoryItems = () => ({\n  type: 'SEARCH_CLEAR_HISTORY',\n});\n\nexport const addSearchHistoryItem = searchHistoryItem => ({\n  type: 'SEARCH_HISTORY_ITEM_CREATED',\n  searchHistoryItem,\n});\n\nexport const setGraphNodesSVGElements = graphNodesSVGElements => ({\n  type: 'GRAPH_NODES_SVG_ELEMENTS_UPDATED',\n  graphNodesSVGElements,\n});\n\nexport const clearSearchResult = () => ({\n  type: 'SEARCH_RESULT_CLEARED',\n});\n\nexport const saveCurrentSearchKeyword = keyword => ({\n  type: 'SEARCH_SAVE_CURRENT_KEYWORD',\n  keyword,\n});\n\nexport const setHighlightingMatchedNodeOpened = opened => ({\n  type: 'GRAPH_MATCHED_NODE_OPENED',\n  opened,\n});\n","import FileSaver from 'file-saver';\nimport PropTypes from 'prop-types';\nimport JSZip from 'jszip';\n//import { dataDictionaryTemplatePath, appname } from '../localconf';\n\nconst dataDictionaryTemplatePath = \"FIXME\";\nconst appname = \"Data Dictionary Vizualizations\"\n\nconst concatTwoWords = (w1, w2) => {\n  if (w1.length === 0) return w2;\n  if (w2.length === 0) return w1;\n  return `${w1} ${w2}`;\n};\n\nexport const truncateLines = (str, maxCharInRow = 10, breakwordMinLength = 12) => {\n  const wordsList = str.split(' ');\n  const res = [];\n  let currentLine = '';\n  for (let i = 0; i < wordsList.length; i += 1) {\n    // if adding a new word will make the current line too long\n    if (concatTwoWords(currentLine, wordsList[i]).length > maxCharInRow) {\n      // if the new word itself is too long, break it\n      if (wordsList[i].length > breakwordMinLength) {\n        let breakPos = maxCharInRow - currentLine.length - 1;\n        if (currentLine.length > 0) breakPos -= 1; // 1 more for space\n        res.push(`${concatTwoWords(currentLine, wordsList[i].substring(0, breakPos))}-`);\n\n        // break the rest of the new word if it's still too long\n        while (breakPos + maxCharInRow < wordsList[i].length) {\n          const nextBreakPos = (breakPos + maxCharInRow) - 1;\n          res.push(`${wordsList[i].substring(breakPos, nextBreakPos)}-`);\n          breakPos = nextBreakPos;\n        }\n        currentLine = wordsList[i].substring(breakPos);\n      } else { // else, end current line and create a new line\n        if (currentLine.length > 0) { // avoid adding first empty line\n          res.push(currentLine);\n        }\n        currentLine = wordsList[i];\n      }\n    } else { // else, just add the new word to current line\n      currentLine = concatTwoWords(currentLine, wordsList[i]);\n    }\n  }\n  res.push(currentLine);\n  return res;\n};\n\n/**\n * Little helper to extract the type for some dictionary node property.\n * Export just for testing.\n * @param {Object} property one of the properties of a dictionary node\n * @return {String|Array<String>} string for scalar types, array for enums\n *                   and other listish types or 'UNDEFINED' if no\n *                   type information availabale\n */\nexport const getType = (property) => {\n  let type = 'UNDEFINED';\n  if ('type' in property) {\n    if (typeof property.type === 'string') {\n      type = property.type;\n    } else {\n      type = property.type;\n    }\n  } else if ('enum' in property) {\n    type = property.enum;\n  } else if ('oneOf' in property) {\n    // oneOf has nested type list - we want to flatten nested enums out here ...\n    type = property.oneOf\n      .map(item => getType(item))\n      .reduce(\n        (flatList, it) => {\n          if (Array.isArray(it)) {\n            return flatList.concat(it);\n          }\n          flatList.push(it);\n          return flatList;\n        }, [],\n      );\n  } else if ('anyOf' in property) {\n    // anyOf has nested type list\n    type = property.anyOf\n      .map(item => getType(item))\n      .reduce(\n        (flatList, it) => {\n          if (Array.isArray(it)) {\n            return flatList.concat(it);\n          }\n          flatList.push(it);\n          return flatList;\n        }, [],\n      );\n  } else {\n    type = 'UNDEFINED';\n  }\n\n  return type;\n};\n\nexport const downloadTemplate = (format, nodeId) => {\n  if (format === 'tsv' || format === 'json') {\n    const templatePath = `${dataDictionaryTemplatePath}${nodeId}?format=${format}`;\n    window.open(templatePath);\n  }\n};\n\nexport const downloadMultiTemplate = (\n  format,\n  nodesToDownload,\n  allRoutes,\n  clickingNodeName,\n  dictionaryVersion,\n) => {\n  if (format !== 'tsv' && format !== 'json') {\n    return;\n  }\n  const zip = new JSZip();\n  Promise.all(Object.keys(nodesToDownload).map((nodeID) => {\n    const fileUrl = `${dataDictionaryTemplatePath}${nodeID}?format=${format}`;\n    const saveAsFileName = nodesToDownload[nodeID];\n    return fetch(fileUrl).then((response) => {\n      if (response.ok) {\n        return response.text();\n      }\n      throw new Error(`cannot download template for node \"${nodeID}\"`);\n    }).then((responseText) => {\n      zip.file(saveAsFileName, responseText);\n    }).catch(() => {\n      throw new Error(`cannot download template for node \"${nodeID}\"`);\n    });\n  })).then(() => {\n    const time = new Date();\n    const startingNodeName = 'Project';\n    let readmeContent = `The following ${format.toUpperCase()} templates were downloaded from ${appname} on ${time.toLocaleDateString()} ${time.toLocaleTimeString()}. The following are all possible paths from \"${startingNodeName}\" node to \"${clickingNodeName}\" using data dictionary version ${dictionaryVersion}. The downloaded ${format.toUpperCase()} files need to be submitted in the order shown in the chosen path(s) below:\\n`;\n    readmeContent = readmeContent.concat(\n      allRoutes.map((nodeIDsInRoute, routeIndex) => `${routeIndex + 1}. ${nodeIDsInRoute.join(',')}`).join('\\n'),\n    );\n    zip.file('README.txt', readmeContent);\n    zip.generateAsync({ type: 'blob' })\n      .then((content) => {\n        FileSaver.saveAs(content, `templates-${format}.zip`);\n      });\n  });\n};\n\nexport const graphStyleConfig = {\n  nodeTextFontSize: 10,\n  nodeTextLineGap: 4,\n  nodeContentPadding: 20,\n  nodeIconRadius: 10,\n};\n\nexport const parseDictionaryNodes = dictionary => Object.keys(dictionary).filter(\n  id => id.charAt(0) !== '_' && id === dictionary[id].id,\n).map(\n  (id) => {\n    const originNode = dictionary[id];\n    return originNode;\n  },\n).filter(\n  node => node.category && node.id,\n);\n\nexport const getPropertyDescription = (property) => {\n  let description;\n  if ('description' in property) {\n    description = property.description;\n  }\n  if ('term' in property) {\n    description = property.term.description;\n  }\n  return description;\n};\n\nconst searchHistoryLocalStorageKey = 'datadictionary:searchHistory';\n/**\n * @typedef {Object} SearchHistoryItem\n * @property {string} keywordStr - keywordStr of this item\n * @property {integer} matchedCount - matched count for this keyword\n */\n\n/**\n * Get search history items from localStorage\n * @returns {SearchHistoryItem[]} array of search history items\n */\nexport const getSearchHistoryItems = () => {\n  const items = JSON.parse(localStorage.getItem(searchHistoryLocalStorageKey));\n  return items;\n};\n\n/**\n * Add search history item to localStorage\n * @params {SearchHistoryItem} searchHistoryItem - item to add into localStorage\n * @returns {SearchHistoryItem[]} array of new search history items\n */\nexport const addSearchHistoryItems = (searchHistoryItem) => {\n  const { keywordStr } = searchHistoryItem;\n  if (!keywordStr || keywordStr.length === 0) return getSearchHistoryItems();\n  const prevHistory = JSON.parse(localStorage.getItem(searchHistoryLocalStorageKey));\n  let newHistory = [];\n  if (prevHistory) newHistory = prevHistory.slice(0); // clone array\n\n  // if item already exists, need to remove item before adding to the beginning\n  if (prevHistory && prevHistory.find(item => item.keywordStr === keywordStr)) {\n    const index = prevHistory.findIndex(item => item.keywordStr === keywordStr);\n    newHistory = prevHistory.slice(0);\n    newHistory.splice(index, 1); // remove item\n  }\n  newHistory.unshift(searchHistoryItem); // add to the beginning\n  localStorage.setItem(searchHistoryLocalStorageKey, JSON.stringify(newHistory));\n  return newHistory;\n};\n\n/**\n * Clear search history item in localStorage\n * @returns {SearchHistoryItem[]} empty array as new search history items\n */\nexport const clearSearchHistoryItems = () => {\n  const newHistory = [];\n  localStorage.setItem(searchHistoryLocalStorageKey, JSON.stringify(newHistory));\n  return newHistory;\n};\n\nexport const MatchedIndicesShape = PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number));\n\nexport const MatchedItemShape = PropTypes.shape({\n  indices: MatchedIndicesShape,\n  arrayIndex: PropTypes.number,\n  key: PropTypes.string,\n  value: PropTypes.string,\n});\n\nexport const SearchItemPropertyShape = PropTypes.shape({\n  name: PropTypes.string,\n  description: PropTypes.string,\n  type: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n});\n\nexport const SearchItemShape = PropTypes.shape({\n  id: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  properties: PropTypes.arrayOf(SearchItemPropertyShape),\n});\n\nexport const SearchResultItemShape = PropTypes.shape({\n  item: SearchItemShape,\n  matches: PropTypes.arrayOf(MatchedItemShape),\n});\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#AD91FF\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.5 4.9h.72c.013.005.026.015.038.016.261.015.522.023.782.044.466.037.93.101 1.385.253.377.126.73.322 1.018.707.038.05.057.1.057.177-.002 2.565-.001 5.13-.001 7.696v.107c-.018-.007-.025-.008-.031-.012-.078-.056-.157-.11-.234-.17a3.81 3.81 0 00-1.973-.803c-.51-.053-1.023-.07-1.534-.101-.07-.005-.142-.001-.22-.001v-.15-7.627c0-.046-.005-.09-.007-.136M13.78 4.9h.72c-.002.045-.007.09-.007.135v7.63c0 .044-.003.088-.004.136h-.077a12.62 12.62 0 00-1.784.118 3.978 3.978 0 00-1.863.79c-.084.064-.17.123-.265.191v-.107c0-2.569 0-5.138.002-7.707 0-.051.02-.115.045-.15.147-.207.319-.366.509-.484.33-.205.68-.304 1.035-.375.506-.1 1.015-.14 1.526-.158.054-.002.108-.013.162-.019\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3.5 5.9h.983v8.114h.12c.61.012 1.22.01 1.828.039.717.033 1.434.105 2.121.374.316.123.618.295.925.446.01.004.016.018.023.027h-6v-9zM11.5 14.9c.006-.01.011-.022.019-.028.5-.36 1.027-.598 1.584-.702a9.748 9.748 0 011.686-.148l.799-.008h.093V5.9h.819v9h-5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"21\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"nonzero\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 .499c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10s-10-4.478-10-10c0-5.523 4.477-10 10-10z\",\n  fill: \"#FF7ABC\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"rotate(-90 10 5)\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"4.5\",\n  height: \"2.7\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"rect\", {\n  y: \"3.6\",\n  width: \"7.2\",\n  height: \"2.7\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M.5 7.2h8a.5.5 0 01.5.5v1.7a.5.5 0 01-.5.5h-8a.5.5 0 01-.5-.5V7.7a.5.5 0 01.5-.5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#27AE60\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11.54 8.807c-.091-.111-.131-.15-.13-.29.005-.942.002-1.957.002-2.9 0-.737-.001-1.475.002-2.212.001-.355-.048-.405-.429-.405H9.12c-.278 0-.362.08-.362.344V5.74c.005.798.004 2.431-.004 2.777a.436.436 0 01-.092.251c-1.315 1.616-2.63 3.232-3.96 4.837-.218.263-.272.501-.101.787.006.01.262.52.456.579.13.039 3.279.039 9.447 0 .206 0 .628-.137.892-.437.107-.122.202-.715-.095-1.06-1.321-1.618-2.438-3.051-3.762-4.667z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#05B8EE\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.45 8.053h2.61V5.45c0-.359.29-.65.65-.65h2.596a.65.65 0 01.648.65v2.602h2.596c.36 0 .65.291.65.65v2.601a.65.65 0 01-.65.652h-2.596v2.595c0 .36-.29.65-.648.65H8.709a.65.65 0 01-.65-.65v-2.595H5.452a.65.65 0 01-.651-.652v-2.6a.65.65 0 01.65-.65z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  xmlnsXlink: \"http://www.w3.org/1999/xlink\"\n}, props), /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  id: \"a\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12.56 9.434c.66.714.551 1.963-.223 2.794-.441.445-1.555 1.18-2.539.294v.866c0 .326-.25.595-.552.595H.552c-.303 0-.552-.27-.552-.595V1.677c0-.327.249-.595.552-.595h1.934V.605c0-.326.249-.594.552-.594h3.727c.303 0 .552.268.552.594v.477h1.932c.302 0 .551.268.551.595v4.786l2.76 2.97zM3.59 1.17v1.01h2.621v-1.01H3.59zM1.077 12.82v.004h7.617V11.34L6.32 8.782c-.083-.088-.138-.177-.138-.297l-.47-2.734c-.053-.603.435-.731.608-.654l2.374.47V2.272h-1.38v.503c-.026.296-.275.566-.551.566H3.038c-.303 0-.552-.27-.552-.595v-.474H1.077v10.55zm10.488-1.424c.387-.418.414-.923.223-1.132L8.477 6.7l-1.574-.327.303 1.723 3.282 3.538c.39.297.856-.03 1.077-.237z\",\n  id: \"b\"\n})), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"use\", {\n  fill: \"#3283C8\",\n  xlinkHref: \"#a\"\n}), /*#__PURE__*/React.createElement(\"use\", {\n  fill: \"#FFF\",\n  xlinkHref: \"#b\",\n  transform: \"translate(5 3)\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#7EC500\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 9.748V4.541c0-.406.192-.603.59-.604l4.483-.004c.148 0 .27.057.374.163l3.287 3.344c.104.105.158.23.158.381l-.004 7.158c0 .301-.134.501-.382.567a.642.642 0 01-.164.017H6.544c-.339 0-.544-.21-.544-.556V9.748z\",\n  fill: \"#FFF\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#7EC500\",\n  fillRule: \"nonzero\",\n  d: \"M10.3 3.933h1V8h-1z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#7EC500\",\n  fillRule: \"nonzero\",\n  d: \"M15 7.5v1h-4.7v-1z\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"nonzero\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#F4B940\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(4.5 6)\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6.5 0h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n}), /*#__PURE__*/React.createElement(\"rect\", {\n  y: \"3\",\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6.5 3h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n}), /*#__PURE__*/React.createElement(\"rect\", {\n  y: \"6\",\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6.5 6h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#E74C3C\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.5 10.208h10M16.5 5.5l-4 4.708M16.5 15.5l-4-5.292M7.25 16.5v-12\",\n  stroke: \"#FFF\",\n  strokeLinecap: \"square\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#26D9B1\",\n  cx: \"10\",\n  cy: \"10\",\n  r: \"10\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4.5 5.5h3a1 1 0 110 2h-3a1 1 0 110-2zM5.5 8.5h3a1 1 0 010 2h-3a1 1 0 110-2zM11.5 8.5h3a1 1 0 010 2h-3a1 1 0 010-2zM7 11.5h3a1 1 0 010 2H7a1 1 0 010-2zM13 11.5h3a1 1 0 010 2h-3a1 1 0 010-2zM10.5 5.5h3a1 1 0 010 2h-3a1 1 0 110-2z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#FF8585\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12.58 8.599l.3-.301a.112.112 0 00.028-.11.114.114 0 00-.084-.077l-1.298-.263a.111.111 0 00-.131.131l.262 1.299c.008.04.037.072.076.084.04.012.082 0 .111-.028l.3-.3.704.703a.11.11 0 00.157 0l.278-.278a.112.112 0 000-.157l-.704-.703z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16.138 14.024l-.647-1.89a.458.458 0 00-.432-.311h-.099a.89.89 0 00.62-.848V4.893A.89.89 0 0014.695 4h-9.49a.89.89 0 00-.885.893v6.082a.89.89 0 00.62.848h-.098a.458.458 0 00-.432.31l-.648 1.891a1.15 1.15 0 00.148 1.035c.212.3.554.48.92.48h10.24c.366 0 .708-.18.92-.48.212-.3.267-.686.148-1.035zM9.95 4.206c.123 0 .224.101.224.226 0 .124-.1.225-.224.225a.225.225 0 01-.223-.225c0-.125.1-.226.223-.226zm-4.745.657l9.52.03v6.111l-9.55-.03.03-6.11zm6.466 9.8a.126.126 0 01-.104.057H8.334a.126.126 0 01-.105-.056.13.13 0 01-.012-.118l.312-.78a.415.415 0 01.384-.261h2.074c.169 0 .32.103.384.261l.312.78a.13.13 0 01-.012.118z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"21\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 .499c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10s-10-4.478-10-10c0-5.523 4.477-10 10-10z\",\n  fill: \"#9B9B9B\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(4 9.5)\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7.5 0h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#E74C3C\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.807 6.539l-1.976 1.976-1.729-.617-.617-1.73 1.976-1.975a3.723 3.723 0 00-4.737 4.642 1.751 1.751 0 00-.156.137L4.51 13.031a1.74 1.74 0 102.46 2.46l4.059-4.06c.05-.049.095-.1.137-.155a3.722 3.722 0 004.642-4.737z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#05B8EE\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 9.73c1.38 0 2.5-1.156 2.5-2.88 0-1.723-.367-3.12-2.5-3.12-2.132 0-2.5 1.397-2.5 3.12 0 1.724 1.12 2.88 2.5 2.88zM15.494 14.903c-.054-3.346-.499-4.3-3.9-4.903 0 0-.478.6-1.594.6S8.406 10 8.406 10c-3.364.597-3.836 1.536-3.898 4.794-.005.266-.007.28-.008.25v.351s.81 2.062 5.5 2.062c4.69 0 5.5-2.062 5.5-2.062v-.26c0 .02-.003-.018-.006-.232z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#7EC500\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.81 5H4.19c-.105 0-.19.09-.19.2v9.6c0 .11.085.2.19.2h11.62c.105 0 .19-.09.19-.2V5.2c0-.11-.085-.2-.19-.2zM15 13l-2.69-2.784a.08.08 0 00-.111-.005l-1.866 1.642-2.385-2.935a.08.08 0 00-.126.003L5 12.703V6h10v7z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#733EA3\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(4 5.5)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10.8 0H1.2C.54 0 0 .45 0 1v9l2.4-2h8.4c.66 0 1.2-.45 1.2-1V1c0-.55-.54-1-1.2-1z\",\n  fill: \"#FFF\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#733EA3\",\n  cx: \"3.4\",\n  cy: \"4\",\n  r: \"1\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#733EA3\",\n  cx: \"6.4\",\n  cy: \"4\",\n  r: \"1\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#733EA3\",\n  cx: \"9.4\",\n  cy: \"4\",\n  r: \"1\"\n})))));","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconAdministrative from '-!react-svg-loader!./icons/icon_administrative.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconAnalysis from '-!react-svg-loader!./icons/icon_analysis.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconBiospecimen from '-!react-svg-loader!./icons/icon_biospecimen.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconClinical from '-!react-svg-loader!./icons/icon_clinical.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconClinicalAssessment from '-!react-svg-loader!./icons/icon_clinical_assessment.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconDataFile from '-!react-svg-loader!./icons/icon_data_file.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconMetadata from '-!react-svg-loader!./icons/icon_metadata.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconNotation from '-!react-svg-loader!./icons/icon_notation.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconIndexFile from '-!react-svg-loader!./icons/icon_index_file.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconDataObservations from '-!react-svg-loader!./icons/icon_data_observations.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconDefault from '-!react-svg-loader!./icons/icon_default.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconExperimentalMethods from '-!react-svg-loader!./icons/icon_experimental_methods.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconSubjectCharacteristics from '-!react-svg-loader!./icons/icon_subject_characteristics.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconImaging from '-!react-svg-loader!./icons/icon_imaging.svg';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport IconStudyAdministration from '-!react-svg-loader!./icons/icon_study_administration.svg';\n\nconst nodeCategoryList = {\n  clinical: {\n    icon: IconClinical,\n    color: '#05B8EE',\n  },\n  biospecimen: {\n    icon: IconBiospecimen,\n    color: '#27AE60',\n  },\n  data_file: {\n    icon: IconDataFile,\n    color: '#7EC500',\n  },\n  metadata_file: {\n    icon: IconMetadata,\n    color: '#F4B940',\n  },\n  analysis: {\n    icon: IconAnalysis,\n    color: '#FF7ABC',\n  },\n  administrative: {\n    icon: IconAdministrative,\n    color: '#AD91FF',\n  },\n  notation: {\n    icon: IconNotation,\n    color: '#E74C3C',\n  },\n  index_file: {\n    icon: IconIndexFile,\n    color: '#26D9B1',\n  },\n  clinical_assessment: {\n    icon: IconClinicalAssessment,\n    color: '#3283C8',\n  },\n  medical_history: {\n    icon: IconClinical,\n    color: '#05B8EE',\n  },\n  data_observations: {\n    icon: IconDataObservations,\n    color: '#FF8585',\n  },\n  experimental_methods: {\n    icon: IconExperimentalMethods,\n    color: '#E74C3C',\n  },\n  subject_characteristics: {\n    icon: IconSubjectCharacteristics,\n    color: '#05B8EE',\n  },\n  imaging: {\n    icon: IconImaging,\n    color: '#7EC500',\n  },\n  study_administration: {\n    icon: IconStudyAdministration,\n    color: '#733EA3',\n  },\n};\n\nconst defaultCategory = {\n  icon: IconDefault,\n  color: '#9B9B9B',\n};\n\nexport const getCategoryIconSVG = (category) => {\n  if (nodeCategoryList[category]) {\n    return nodeCategoryList[category].icon;\n  }\n\n  return defaultCategory.icon;\n};\n\nexport const getCategoryColor = (category) => {\n  if (nodeCategoryList[category]) {\n    return nodeCategoryList[category].color;\n  }\n\n  return defaultCategory.color;\n};\n","import * as d3 from 'd3-scale';\n\n//import { submissionApiPath } from './localconf';\n\nconst submissionApiPath = \"FIXME-submissionApiPath\";\n\nexport const humanFileSize = (size) => {\n  if (typeof size !== 'number') {\n    return '';\n  }\n  const i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024));\n  const sizeStr = (size / (1024 ** i)).toFixed(2) * 1;\n  const suffix = ['B', 'KB', 'MB', 'GB', 'TB'][i];\n  return `${sizeStr} ${suffix}`;\n};\n\nexport const getSubmitPath = (project) => {\n  const path = project.split('-');\n  const programName = path[0];\n  const projectCode = path.slice(1).join('-');\n  return `${submissionApiPath}/${programName}/${projectCode}`;\n};\n\nexport const jsonToString = (data, schema = {}) => {\n  const replacer = (key, value) => {\n    if (value === null) {\n      return undefined;\n    }\n    if (schema[key] === 'number') {\n      const castedValue = Number(value);\n      if (isNaN(castedValue)) {\n        return value;\n      }\n      return castedValue;\n    }\n    return value;\n  };\n  return JSON.stringify(data, replacer, '  ');\n};\n\nexport const predictFileType = (dirtyData, fileType) => {\n  const predictType = fileType;\n  const jsonType = 'application/json';\n  const tsvType = 'text/tab-separated-values';\n  const data = dirtyData.trim();\n  if (data.indexOf('{') !== -1 || data.indexOf('}') !== -1) {\n    return jsonType;\n  }\n  if (data.indexOf('\\t') !== -1) {\n    return tsvType;\n  }\n  return predictType;\n};\n\n\n/**\n * Little wrapper around setinterval with a guard to prevent an async function\n * from being invoked multiple times.\n *\n * @param {()=>Promise} lambda callback should return a Promise\n * @param {int} timeoutMs passed through to setinterval\n * @return the setinterval id (can be passed to clearinterval)\n */\nexport async function asyncSetInterval(lambda, timeoutMs) {\n  let isRunningGuard = false;\n  return setInterval(\n    () => {\n      if (!isRunningGuard) {\n        isRunningGuard = true;\n\n        lambda().then(\n          () => { isRunningGuard = false; },\n        );\n      }\n    }, timeoutMs,\n  );\n}\n\n\nexport const getCategoryColor = (category) => {\n  const colorMap = {\n    clinical: '#05B8EE',\n    biospecimen: '#27AE60',\n    data_file: '#7EC500',\n    metadata_file: '#F4B940',\n    analysis: '#FF7ABC',\n    administrative: '#AD91FF',\n    notation: '#E74C3C',\n    index_file: '#26D9B1',\n    clinical_assessment: '#3283C8',\n    medical_history: '#05B8EE',\n    satellite: d3.schemeCategory20[11],\n    radar: d3.schemeCategory20[16],\n    stream_gauge: d3.schemeCategory20[19],\n    weather_station: d3.schemeCategory20[10],\n    data_observations: d3.schemeCategory20[3],\n    experimental_methods: d3.schemeCategory20[4],\n    Imaging: d3.schemeCategory20[5],\n    study_administration: d3.schemeCategory20[6],\n    subject_characteristics: d3.schemeCategory20[7],\n  };\n  const defaultColor = '#9B9B9B';\n  return colorMap[category] ? colorMap[category] : defaultColor;\n};\n\nexport function legendCreator(legendGroup, nodes, legendWidth) {\n  // Find all unique categories\n  const uniqueCategoriesList = nodes.reduce((acc, elem) => {\n    if (acc.indexOf(elem.category) === -1) {\n      acc.push(elem.category);\n    }\n    return acc;\n  }, []);\n  uniqueCategoriesList.sort((aIn, bIn) => {\n    const a = aIn.toLowerCase();\n    const b = bIn.toLowerCase();\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    }\n    return 0;\n  },\n  );\n\n  const legendFontSize = '0.9em';\n  // Make Legend\n  legendGroup.selectAll('text')\n    .data(uniqueCategoriesList)\n    .enter().append('text')\n    .attr('x', legendWidth / 2)\n    .attr('y', (d, i) => `${1.5 * (2.5 + i)}em`)\n    .attr('text-anchor', 'middle')\n    .attr('fill', d => getCategoryColor(d))\n    .style('font-size', legendFontSize)\n    .text(d => d);\n\n  legendGroup.append('text')\n    .attr('x', legendWidth / 2)\n    .attr('y', `${2}em`)\n    .attr('text-anchor', 'middle')\n    .text('Categories')\n    .style('font-size', legendFontSize)\n    .style('text-decoration', 'underline');\n}\n\n\nexport function addArrows(graphSvg) {\n  graphSvg.append('svg:defs')\n    .append('svg:marker')\n    .attr('id', 'end-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('fill', 'darkgray')\n    .attr('refX', 0)\n    .attr('refY', 0)\n    .attr('markerWidth', 6)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto')\n    .append('svg:path')\n    .attr('d', 'M0,-5L10,0L0,5');\n}\n\nexport function addLinks(graphSvg, edges) {\n  return graphSvg.append('g')\n    .selectAll('path')\n    .data(edges)\n    .enter()\n    .append('path')\n    .attr('stroke-width', 2)\n    .attr('marker-mid', 'url(#end-arrow)')\n    .attr('stroke', 'darkgray')\n    .attr('fill', 'none');\n}\n\n\n/**\n * Compute SVG coordinates fx, fy for each node in nodes.\n * Decorate each node with .fx and .fy property as side effect.\n *\n * @param {Array<Node>} nodes each decorated with a position [width,height] in [0,1]\n * @param {*} graphWidth\n * @param {*} graphHeight\n */\nexport function calculatePosition(nodes, graphWidth, graphHeight) {\n  // Calculate the appropriate position of each node on the graph\n  const fyVals = [];\n  const retNodes = nodes;\n  for (let i = 0; i < nodes.length; i += 1) {\n    retNodes[i].fx = retNodes[i].position[0] * graphWidth;\n    retNodes[i].fy = retNodes[i].position[1] * graphHeight;\n    if (fyVals.indexOf(retNodes[i].fy) === -1) {\n      fyVals.push(retNodes[i].fy);\n    }\n  }\n  return { retNodes, fyValsLength: fyVals.length };\n}\n\n/**\n * Type agnostic compare thunk for Array.sort\n * @param {*} a\n * @param {*} b\n */\nexport function sortCompare(a, b) {\n  if (a === b) { return 0; }\n  return a < b ? -1 : 1;\n}\n\nexport function computeLastPageSizes(filesMap, pageSize) {\n  return Object.keys(filesMap).reduce((d, key) => {\n    const result = d;\n    result[key] = filesMap[key].length % pageSize;\n    return result;\n  }, {});\n}\n\nexport function capitalizeFirstLetter(str) {\n  const res = str.replace(/_/gi, ' ');\n  return res.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n\n/**\n * Avoid importing underscore just for this ... export for testing\n * @method intersection\n * @param aList {Array<String>}\n * @param bList {Array<String>}\n * @return list of intersecting elements\n */\nexport function intersection(aList, bList) {\n  const key2Count = aList.concat(bList).reduce(\n    (db, it) => {\n      const res = db;\n      if (res[it]) { res[it] += 1; } else { res[it] = 1; }\n      return res;\n    }, {},\n  );\n  return Object.entries(key2Count)\n    .filter(kv => kv[1] > 1)\n    .map(([k]) => k);\n}\n\nexport function minus(aList, bList) {\n  const key2Count = aList.concat(bList).concat(aList).reduce(\n    (db, it) => {\n      const res = db;\n      if (res[it]) { res[it] += 1; } else { res[it] = 1; }\n      return res;\n    }, {},\n  );\n  return Object.entries(key2Count)\n    .filter(kv => kv[1] === 2)\n    .map(([k]) => k);\n}\n\nexport const parseParamWidth = width => ((typeof width === 'number') ? `${width}px` : width);\n\nexport const isPageFullScreen = pathname => (!!((pathname\n  && (pathname.toLowerCase() === '/dd'\n  || pathname.toLowerCase().startsWith('/dd/')\n  || pathname.toLowerCase() === '/cohort-tools'\n  || pathname.toLowerCase().startsWith('/cohort-tools/')\n  ))));\n\nexport const isFooterHidden = pathname => (!!((pathname\n  && (pathname.toLowerCase() === '/dd'\n  || pathname.toLowerCase().startsWith('/dd/')\n  ))));\n","import React from 'react';\nimport { getPropertyDescription, getType } from './utils';\n\nconst escapeReturnChar = (str, newlineClassName) => {\n  if (!str) return str;\n  const pieces = str.split('\\\\n');\n  if (pieces.length <= 1) return str;\n  return pieces.map((piece, i) => (\n    <span\n      key={`span-${i}`}\n      className={(i === 0 || i === pieces.length) ? '' : newlineClassName}\n    >\n      {piece}\n    </span>\n  ));\n};\n\nconst addHighlightingSpans = (str, indices, spanClassName) => {\n  let cursor = 0;\n  let currentIndices = 0;\n  const resultFragments = [];\n  const highlightSpanClassName = `${spanClassName}--highlight`;\n  const newlineClassName = `${spanClassName}--new-line`;\n  while (currentIndices < indices.length) {\n    if (cursor < indices[currentIndices][0]) {\n      resultFragments.push(\n        (\n          <div\n            key={cursor}\n            className={spanClassName}\n          >\n            {escapeReturnChar(str.substring(cursor, indices[currentIndices][0]), newlineClassName)}\n          </div>\n        ),\n      );\n    }\n    resultFragments.push(\n      (\n        <div\n          key={indices[currentIndices][0]}\n          className={`${spanClassName} ${highlightSpanClassName}`}\n        >\n          {\n            escapeReturnChar(\n              str.substring(\n                indices[currentIndices][0],\n                indices[currentIndices][1] + 1),\n              newlineClassName,\n            )\n          }\n        </div>\n      ),\n    );\n    cursor = indices[currentIndices][1] + 1;\n    currentIndices += 1;\n  }\n  if (cursor < str.length) {\n    resultFragments.push(\n      (\n        <div\n          key={cursor}\n          className={spanClassName}\n        >\n          {escapeReturnChar(str.substring(cursor), newlineClassName)}\n        </div>\n      ),\n    );\n  }\n  return resultFragments;\n};\n\nexport const getPropertyNameFragment = (propertyName, matchedItem, spanClassName) => {\n  const propertyNameFragment = addHighlightingSpans(\n    propertyName,\n    matchedItem ? matchedItem.indices : [],\n    spanClassName,\n  );\n  return propertyNameFragment;\n};\n\nexport const getPropertyTypeFragment = (property, typeMatchList, spanClassName) => {\n  const type = getType(property);\n  let propertyTypeFragment;\n  if (typeof type === 'string') {\n    propertyTypeFragment = (\n      <li>\n        {\n          addHighlightingSpans(\n            type,\n            (typeMatchList && typeMatchList[0]) ? typeMatchList[0].indices : [],\n            spanClassName,\n          )\n        }\n      </li>\n    );\n  } else {\n    propertyTypeFragment = type.map((t, i) => {\n      const matchedTypeItem = typeMatchList && typeMatchList.find(\n        matchItem => matchItem.value === t);\n      if (matchedTypeItem) {\n        return (\n          <li key={i}>\n            {\n              addHighlightingSpans(\n                t,\n                matchedTypeItem.indices,\n                spanClassName,\n              )\n            }\n          </li>\n        );\n      }\n      return (\n        <li key={i}>\n          {\n            addHighlightingSpans(\n              t,\n              [],\n              spanClassName,\n            )\n          }\n        </li>\n      );\n    });\n  }\n  return propertyTypeFragment;\n};\n\nexport const getPropertyDescriptionFragment = (property, matchedItem, spanClassName) => {\n  let descriptionStr = getPropertyDescription(property);\n  if (!descriptionStr) descriptionStr = 'No Description';\n  const propertyDescriptionFragment = addHighlightingSpans(\n    descriptionStr,\n    matchedItem ? matchedItem.indices : [],\n    spanClassName,\n  );\n  return propertyDescriptionFragment;\n};\n\nexport const getNodeTitleFragment = (allMatches, title, spanClassName) => {\n  const matchedItem = allMatches.find(item => item.key === 'title');\n  const nodeTitleFragment = addHighlightingSpans(\n    title,\n    matchedItem ? matchedItem.indices : [],\n    spanClassName,\n  );\n  return nodeTitleFragment;\n};\n\nexport const getNodeDescriptionFragment = (allMatches, description, spanClassName) => {\n  const matchedItem = allMatches.find(item => item.key === 'description');\n  const nodeDescriptionFragment = addHighlightingSpans(\n    description,\n    matchedItem ? matchedItem.indices : [],\n    spanClassName,\n  );\n  return nodeDescriptionFragment;\n};\n\nexport const getMatchInsideProperty = (propertyIndex, propertyKey, property, allMatches) => {\n  let nameMatch = null;\n  let descriptionMatch = null;\n  const typeMatchList = [];\n  if (allMatches) {\n    allMatches.forEach((item) => {\n      if (item.key === 'properties.name' && item.value === propertyKey) {\n        nameMatch = item;\n      } else if (item.key === 'properties.description') {\n        const descriptionStr = getPropertyDescription(property);\n        if (item.value === descriptionStr) {\n          descriptionMatch = item;\n        }\n      } else if (item.key === 'properties.type') {\n        const type = getType(property);\n        if (typeof type === 'string') {\n          if (type === item.value) {\n            typeMatchList.push(item);\n          }\n        } else if (type.includes(item.value)) {\n          typeMatchList.push(item);\n        }\n      }\n    });\n  }\n  return {\n    nameMatch,\n    descriptionMatch,\n    typeMatchList,\n  };\n};\n\nexport const getMatchesSummaryForProperties = (allProperties, allMatches) => {\n  const matchedPropertiesSummary = [];\n  Object.keys(allProperties).forEach((propertyKey, propertyIndex) => {\n    const property = allProperties[propertyKey];\n    const {\n      nameMatch,\n      descriptionMatch,\n      typeMatchList,\n    } = getMatchInsideProperty(propertyIndex, propertyKey, property, allMatches);\n    const summaryItem = {\n      propertyKey,\n      property,\n      nameMatch,\n      descriptionMatch,\n      typeMatchList,\n    };\n    if (nameMatch || descriptionMatch || typeMatchList.length > 0) {\n      matchedPropertiesSummary.push(summaryItem);\n    }\n  });\n  return matchedPropertiesSummary;\n};\n\nexport const getNodeTitleSVGFragment = (\n  nodeNames,\n  matchedNodeNameIndices,\n  fontSize,\n  textPadding,\n  textLineGap,\n) => {\n  const nodeTitleFragment = [];\n  let currentRowIndex = 0;\n  let rowStartIndex = 0;\n  let rowEndIndex;\n  const nodeNameRows = nodeNames;\n  let currentHighlightIndex = 0;\n  const textAttrBase = {\n    x: 0,\n    textAnchor: 'middle',\n    alignmentBaseline: 'hanging',\n    fontSize,\n    className: 'graph-node__text',\n  };\n  const tspanAttrBase = {\n    textAnchor: 'middle',\n    alignmentBaseline: 'hanging',\n    fontSize,\n  };\n  const tspanAttr = {\n    ...tspanAttrBase,\n    className: 'graph-node__tspan',\n  };\n  const tspanHighlightAttr = {\n    ...tspanAttrBase,\n    className: 'graph-node__tspan graph-node__tspan--highlight',\n  };\n  while (currentRowIndex < nodeNameRows.length) { // for each row\n    const currentRowStr = nodeNameRows[currentRowIndex];\n    rowEndIndex = rowStartIndex + currentRowStr.length;\n    const textY = textPadding +\n      (currentRowIndex * (fontSize + textLineGap));\n    const textAttr = {\n      ...textAttrBase,\n      key: currentRowIndex,\n      y: textY,\n    };\n    let cursorInRow = 0;\n    const currentRowFragment = [];\n\n    // Go over all highlighted text in current row\n    while (currentHighlightIndex < matchedNodeNameIndices.length) {\n      const highlightStartIndex = matchedNodeNameIndices[currentHighlightIndex][0];\n      const highlightEndIndex = matchedNodeNameIndices[currentHighlightIndex][1] + 1;\n      if (highlightStartIndex > rowEndIndex) {\n        currentRowFragment.push((\n          <tspan key={cursorInRow} {...tspanAttr}>\n            {currentRowStr.substring(cursorInRow)}\n          </tspan>\n        ));\n        cursorInRow = currentRowStr.length;\n        break;\n      }\n      const highlightStartIndexInRow = highlightStartIndex - rowStartIndex;\n      const highlightEndIndexInRow = highlightEndIndex - rowStartIndex;\n      if (cursorInRow < highlightStartIndexInRow) {\n        currentRowFragment.push((\n          <tspan key={cursorInRow} {...tspanAttr}>\n            {currentRowStr.substring(cursorInRow, highlightStartIndexInRow)}\n          </tspan>\n        ));\n        cursorInRow = highlightStartIndexInRow;\n      }\n      if (highlightEndIndex <= rowEndIndex) {\n        currentRowFragment.push((\n          <tspan key={cursorInRow} {...tspanHighlightAttr}>\n            {currentRowStr.substring(cursorInRow, highlightEndIndexInRow)}\n          </tspan>\n        ));\n        cursorInRow = highlightEndIndexInRow;\n        currentHighlightIndex += 1;\n      } else {\n        currentRowFragment.push((\n          <tspan key={cursorInRow} {...tspanHighlightAttr}>\n            {currentRowStr.substring(cursorInRow)}\n          </tspan>\n        ));\n        cursorInRow = currentRowStr.lenght;\n        break;\n      }\n    }\n\n    // Check text in the current row are all added to the list\n    if (cursorInRow < currentRowStr.length) {\n      currentRowFragment.push((\n        <tspan key={cursorInRow} {...tspanAttr}>{currentRowStr.substring(cursorInRow)}</tspan>\n      ));\n    }\n\n    // Add all fragment of current line to the node title fragment list\n    nodeTitleFragment.push((\n      <text {...textAttr}>{currentRowFragment}</text>\n    ));\n    currentRowIndex += 1;\n    rowStartIndex += currentRowStr.length + 1;\n  } // end of while, go to the next row\n  return nodeTitleFragment;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchResultItemShape } from '../../utils';\nimport {\n  getMatchesSummaryForProperties,\n  getPropertyNameFragment,\n  getPropertyDescriptionFragment,\n  getPropertyTypeFragment,\n} from '../../highlightHelper';\nimport './DataDictionaryPropertyTable.css';\n\nclass DataDictionaryPropertyTable extends React.Component {\n  render() {\n    const borderModifier = this.props.hasBorder ? ''\n      : 'data-dictionary-property-table--without-border';\n    const propertyKeysList = this.props.hideIsRequired ? Object.keys(this.props.properties)\n      : Object.keys(this.props.properties)\n        .sort((k1, k2) => {\n          const required1 = this.props.requiredProperties.includes(k1);\n          const required2 = this.props.requiredProperties.includes(k2);\n          if (required1) return -1;\n          if (required2) return 1;\n          return 0;\n        });\n    const needHighlightSearchResult = this.props.onlyShowMatchedProperties\n      || this.props.needHighlightSearchResult;\n    const matchedPropertiesSummary = needHighlightSearchResult\n      ? getMatchesSummaryForProperties(\n        this.props.properties,\n        this.props.matchedResult.matches,\n      ) : [];\n    return (\n      <div className={`data-dictionary-property-table ${borderModifier}`}>\n        <table className='data-dictionary-property-table__table'>\n          <thead className='data-dictionary-property-table__head'>\n            <tr className='data-dictionary-property-table__row'>\n              <th\n                className='data-dictionary-property-table__data\n                data-dictionary-property-table__data--property'\n              >\n                Property\n              </th>\n              <th\n                className='data-dictionary-property-table__data\n                data-dictionary-property-table__data--type'\n              >\n                Type\n              </th>\n              {\n                !this.props.hideIsRequired && (\n                  <th\n                    className='data-dictionary-property-table__data\n                    data-dictionary-property-table__data--required'\n                  >\n                    Required\n                  </th>\n                )\n              }\n              <th\n                className='data-dictionary-property-table__data\n                data-dictionary-property-table__data--description'\n              >\n                Description\n              </th>\n              <th\n                className='data-dictionary-property-table__data\n                data-dictionary-property-table__data--term'\n              >\n                Term\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              propertyKeysList.map((propertyKey) => {\n                const property = this.props.properties[propertyKey];\n                let nameMatch = null;\n                let descriptionMatch = null;\n                let typeMatchList = null;\n                if (this.props.needHighlightSearchResult) {\n                  const matchedSummaryItem = matchedPropertiesSummary\n                    .find(item => item.propertyKey === propertyKey);\n                  if (matchedSummaryItem) {\n                    nameMatch = matchedSummaryItem.nameMatch;\n                    descriptionMatch = matchedSummaryItem.descriptionMatch;\n                    typeMatchList = matchedSummaryItem.typeMatchList;\n                  } else if (this.props.onlyShowMatchedProperties) {\n                    return null;\n                  }\n                }\n                let termID = '';\n                let termLink = '';\n                if ('term' in property) {\n                  termID = property.term.termDef && property.term.termDef.cde_id;\n                  termLink = property.term.termDef && property.term.termDef.term_url;\n                }\n                const propertyNameFragment = getPropertyNameFragment(\n                  propertyKey,\n                  nameMatch,\n                  'data-dictionary-property-table__span',\n                );\n                const propertyTypeFragment = getPropertyTypeFragment(\n                  property,\n                  typeMatchList,\n                  'data-dictionary-property-table__span',\n                );\n                const propertyDescriptionFragment = getPropertyDescriptionFragment(\n                  property,\n                  descriptionMatch,\n                  'data-dictionary-property-table__span',\n                );\n                const isRequired = this.props.requiredProperties.includes(propertyKey);\n                return (\n                  <tr key={propertyKey}>\n                    <td className='data-dictionary-property-table__data'>\n                      {propertyNameFragment}\n                    </td>\n                    <td className='data-dictionary-property-table__data'>\n                      {propertyTypeFragment}\n                    </td>\n                    {\n                      !this.props.hideIsRequired && (\n                        <td className='data-dictionary-property-table__data'>\n                          { isRequired ? (\n                            <span className='data-dictionary-property-table__required'>\n                              <i className='g3-icon g3-icon--star data-dictionary-property-table__required-icon' />Required\n                            </span>\n                          ) : (\n                            <span>No</span>\n                          )\n                          }\n                        </td>\n                      )\n                    }\n                    <td className='data-dictionary-property-table__data'>\n                      {propertyDescriptionFragment}\n                    </td>\n                    <td className='data-dictionary-property-table__data'>\n                      <a href={termLink}>{termID}</a>\n                    </td>\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nDataDictionaryPropertyTable.propTypes = {\n  properties: PropTypes.object.isRequired,\n  requiredProperties: PropTypes.array,\n  hasBorder: PropTypes.bool,\n  needHighlightSearchResult: PropTypes.bool,\n  matchedResult: SearchResultItemShape,\n  hideIsRequired: PropTypes.bool,\n  onlyShowMatchedProperties: PropTypes.bool,\n};\n\nDataDictionaryPropertyTable.defaultProps = {\n  requiredProperties: [],\n  hasBorder: true,\n  needHighlightSearchResult: false,\n  matchedResult: {},\n  hideIsRequired: false,\n  onlyShowMatchedProperties: false,\n};\n\nexport default DataDictionaryPropertyTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@gen3/ui-component/dist/components/Button';\nimport { downloadTemplate } from '../../utils';\nimport { getCategoryColor } from '../../NodeCategories/helper';\nimport DataDictionaryPropertyTable from '../DataDictionaryPropertyTable/.';\nimport './DataDictionaryNode.css';\n\nclass DataDictionaryNode extends React.Component {\n  handleClickNode(nodeID) {\n    if (!this.props.expanded) {\n      this.props.onExpandNode(nodeID);\n    } else {\n      this.props.onExpandNode(null);\n    }\n  }\n\n  handleCloseNode = () => {\n    this.props.onExpandNode(null);\n  }\n\n  handleDownloadTemplate = (e, format) => {\n    e.stopPropagation(); // no toggling\n    downloadTemplate(format, this.props.node.id);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          className='data-dictionary-node'\n          style={{ borderLeftColor: getCategoryColor(this.props.node.category) }}\n          onClick={() => this.handleClickNode(this.props.node.id)}\n          onKeyPress={() => this.handleClickNode(this.props.node.id)}\n          role='button'\n          tabIndex={0}\n        >\n          <span\n            className='data-dictionary-node__title'\n          >\n            <i className='g3-icon g3-icon--folder data-dictionary-node__file-icon' />\n            {this.props.node.title}\n            <i className={`g3-icon g3-icon--chevron-${this.props.expanded ? 'down' : 'right'} data-dictionary-node__toggle-icon`} />\n          </span>\n          <span\n            className='data-dictionary-node__description'\n          >\n            {this.props.description}\n          </span>\n          <div className='data-dictionary-node__download-group'>\n            <span className='data-dictionary-node__button-wrap'>\n              <Button\n                className='data-dictionary-node__download-button'\n                onClick={(e) => { this.handleDownloadTemplate(e, 'json'); }}\n                label='JSON'\n                rightIcon='download'\n                buttonType='secondary'\n              />\n            </span>\n            <span className='data-dictionary-node__button-wrap'>\n              <Button\n                className='data-dictionary-node__download-button'\n                onClick={(e) => { this.handleDownloadTemplate(e, 'tsv'); }}\n                label='TSV'\n                rightIcon='download'\n                buttonType='secondary'\n              />\n            </span>\n          </div>\n        </div>\n        {\n          this.props.expanded && (\n            <div className='data-dictionary-node__property'>\n              <span\n                className='data-dictionary-node__property-close'\n                onClick={this.handleCloseNode}\n                onKeyPress={this.handleCloseNode}\n                role='button'\n                tabIndex={0}\n              >\n                Close tab\n                <i className='g3-icon g3-icon--cross data-dictionary-node__property-close-icon' />\n              </span>\n              <div className='data-dictionary-node__property-summary'>\n                <span>{this.props.node.title}</span>\n                <span> has </span>\n                <span>{Object.keys(this.props.node.properties).length}</span>\n                <span> properties. </span>\n              </div>\n              <DataDictionaryPropertyTable\n                properties={this.props.node.properties}\n                requiredProperties={this.props.node.required}\n              />\n            </div>\n          )\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nDataDictionaryNode.propTypes = {\n  node: PropTypes.object.isRequired,\n  description: PropTypes.string,\n  expanded: PropTypes.bool,\n  onExpandNode: PropTypes.func,\n};\n\nDataDictionaryNode.defaultProps = {\n  description: '',\n  expanded: false,\n  onExpandNode: () => {},\n};\n\nexport default DataDictionaryNode;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getCategoryColor, getCategoryIconSVG } from '../../NodeCategories/helper';\nimport { capitalizeFirstLetter } from '../../../utils';\nimport DataDictionaryNode from '../DataDictionaryNode/.';\nimport './DataDictionaryCategory.css';\n\nclass DataDictionaryCategory extends React.Component {\n  render() {\n    const IconSVG = getCategoryIconSVG(this.props.category);\n    return (<div className='data-dictionary-category'>\n      <div className='data-dictionary-category__head' style={{ borderLeftColor: getCategoryColor(this.props.category) }}>\n        <IconSVG className='data-dictionary-category__icon' />\n        <span>\n          {capitalizeFirstLetter(this.props.category)}\n        </span>\n        <span className='data-dictionary-category__download_template'>Download Template</span>\n      </div>\n      {\n        this.props.nodes.map(\n          node => (<DataDictionaryNode\n            node={node}\n            key={node.id}\n            description={node.description}\n            expanded={this.props.highlightingNodeID && this.props.highlightingNodeID === node.id}\n            onExpandNode={this.props.onExpandNode}\n          />),\n        )\n      }\n    </div>);\n  }\n}\n\nDataDictionaryCategory.propTypes = {\n  category: PropTypes.string.isRequired,\n  nodes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      description: PropTypes.string,\n    }),\n  ).isRequired,\n  highlightingNodeID: PropTypes.string,\n  onExpandNode: PropTypes.func,\n};\n\nDataDictionaryCategory.defaultProps = {\n  highlightingNodeID: null,\n  onExpandNode: () => {},\n};\n\nexport default DataDictionaryCategory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './DataDictionaryTable.css';\nimport { parseDictionaryNodes } from '../../utils';\nimport DataDictionaryCategory from '../DataDictionaryCategory/.';\n\n/**\n * Just exported for testing\n * Little helper that extacts a mapping of category-name to\n * the list of nodes in that category given a dictionary definition object\n *\n * @param {Object} dictionary\n * @return {} mapping from category to node list\n */\n/* eslint-disable no-param-reassign */\nexport function category2NodeList(dictionary) {\n  const res = Object.keys(dictionary).filter(\n    id => id.charAt(0) !== '_' && id === dictionary[id].id,\n  ).map(\n    id => dictionary[id],\n  ).filter(\n    node => node.category && node.id,\n  )\n    .reduce(\n      (lookup, node) => {\n        if (!lookup[node.category]) {\n          lookup[node.category] = [];\n        }\n        lookup[node.category].push(node);\n        return lookup;\n      }, {},\n    );\n  return res;\n}\n/* eslint-enable no-param-reassign */\n\nconst getNodePropertyCount = (dictionary) => {\n  const res = parseDictionaryNodes(dictionary)\n    .reduce((acc, node) => {\n      acc.nodesCount += 1;\n      acc.propertiesCount += Object.keys(node.properties).length;\n      return acc;\n    }, {\n      nodesCount: 0,\n      propertiesCount: 0,\n    });\n  return {\n    nodesCount: res.nodesCount,\n    propertiesCount: res.propertiesCount,\n  };\n};\n\n/**\n * Little components presents an overview of the types in a dictionary organized by category\n *\n * @param {dictionary} params\n */\nconst DataDictionaryTable = ({ dictionary, highlightingNodeID, onExpandNode, dictionaryName }) => {\n  const c2nl = category2NodeList(dictionary);\n  const { nodesCount, propertiesCount } = getNodePropertyCount(dictionary);\n  return (\n    <React.Fragment>\n      <p>\n        <span>{dictionaryName}</span>\n        <span> dictionary has </span>\n        <span>{nodesCount}</span>\n        <span> nodes and </span>\n        <span>{propertiesCount}</span>\n        <span> properties </span>\n      </p>\n      {Object.keys(c2nl).map(category =>\n        (<DataDictionaryCategory\n          key={category}\n          nodes={c2nl[category]}\n          category={category}\n          highlightingNodeID={highlightingNodeID}\n          onExpandNode={onExpandNode}\n        />))}\n    </React.Fragment>\n  );\n};\n\nDataDictionaryTable.propTypes = {\n  dictionary: PropTypes.object,\n  highlightingNodeID: PropTypes.string,\n  onExpandNode: PropTypes.func,\n  dictionaryName: PropTypes.string,\n};\n\nDataDictionaryTable.defaultProps = {\n  dictionary: {},\n  highlightingNodeID: null,\n  onExpandNode: () => {},\n  dictionaryName: '',\n};\n\nexport default DataDictionaryTable;\n","import { connect } from 'react-redux';\nimport { setExpandNode } from '../../action';\nimport DataDictionaryTable from './DataDictionaryTable';\n\nconst ReduxDataDictionaryTable = (() => {\n  const mapStateToProps = state => ({\n    dictionary: state.submission.dictionary,\n    highlightingNodeID: state.ddgraph.tableExpandNodeID,\n    dictionaryName: \"Dictionary Utils Viz\",\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onExpandNode: nodeID =>\n      dispatch(setExpandNode(nodeID)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(DataDictionaryTable);\n})();\n\nexport default ReduxDataDictionaryTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@gen3/ui-component/dist/components/Button';\nimport Dropdown from '@gen3/ui-component/dist/components/Dropdown';\nimport { getCategoryIconSVG } from '../NodeCategories/helper';\nimport { downloadMultiTemplate } from '../utils';\nimport { intersection } from '../../utils';\nimport './DataModelStructure.css';\n\nclass DataModelStructure extends React.Component {\n  handleClickGraphButton = () => {\n    this.props.onSetGraphView(true);\n    this.props.onResetGraphCanvas();\n  };\n\n  handleClickOverlayPropertyButton = () => {\n    this.props.onSetGraphView(true);\n    this.props.onSetOverlayPropertyTableHidden(!this.props.overlayPropertyHidden);\n  };\n\n  downloadTemplatesEnabled = () => {\n    if (this.props.relatedNodeIDs.length > this.props.excludedNodesForTemplates) return true;\n    const intersectionNodeIDs = intersection(\n      this.props.relatedNodeIDs,\n      this.props.excludedNodesForTemplates,\n    );\n    return intersectionNodeIDs.length !== this.props.relatedNodeIDs.length;\n  }\n\n  handleDownloadAllTemplates = (format) => {\n    const nodesToDownload = {};\n    this.props.relatedNodeIDs\n      .filter(nid => !this.props.excludedNodesForTemplates.includes(nid))\n      .forEach((nid) => {\n        nodesToDownload[nid] = `${nid}-template.${format}`;\n      }, []);\n    const allRoutes = this.props.allRoutes.map(nodeIDsInRoute =>\n      nodeIDsInRoute.filter(nid => !this.props.excludedNodesForTemplates.includes(nid)));\n    this.props.downloadMultiTemplate(\n      format,\n      nodesToDownload,\n      allRoutes,\n      this.props.clickingNodeName,\n      this.props.dictionaryVersion,\n    );\n  };\n\n  render() {\n    if (!this.props.dataModelStructure) return (<React.Fragment />);\n    return (\n      <div className='data-model-structure'>\n        <h4 className='data-model-structure__header'>Data Model Structure</h4>\n        <div className='data-model-structure__containter'>\n          <div className='data-model-structure__path-line' />\n          {\n            this.props.dataModelStructure.map((entry, i) => {\n              const { nodeID, nodeIDsBefore, linksBefore, category } = entry;\n              const IconSVG = getCategoryIconSVG(category);\n              const lastNodeModifier = (i === this.props.dataModelStructure.length - 1) ? 'data-model-structure__node-name--last' : '';\n              return (\n                <React.Fragment key={nodeID}>\n                  {\n                    nodeIDsBefore.length > 0 && (\n                      <React.Fragment>\n                        <div className='data-model-structure__summary-between'>{nodeIDsBefore.length} nodes with {linksBefore.length} links</div>\n                        {\n                          !this.props.isGraphView && (\n                            <Button\n                              onClick={this.handleClickGraphButton}\n                              label='See it on graph'\n                              className='data-model-structure__graph-button'\n                              buttonType='secondary'\n                            />\n                          )\n                        }\n                      </React.Fragment>\n                    )\n                  }\n                  <div className='data-model-structure__node'>\n                    <IconSVG className='data-model-structure__icon' />\n                    <span className={`data-model-structure__node-name ${lastNodeModifier} introduction`}>{nodeID}</span>\n                  </div>\n                </React.Fragment>\n              );\n            })\n          }\n        </div>\n        {\n          this.props.isGraphView && (\n            <React.Fragment>\n              <Button\n                onClick={this.handleClickOverlayPropertyButton}\n                label={this.props.overlayPropertyHidden ? 'Open properties' : 'Close properties'}\n                className='data-model-structure__table-button'\n                rightIcon='list'\n                buttonType='primary'\n              />\n              {\n                this.downloadTemplatesEnabled() && (\n                  <Dropdown\n                    className='data-model-structure__template-download-dropdown'\n                  >\n                    <Dropdown.Button>Download templates</Dropdown.Button>\n                    <Dropdown.Menu>\n                      <Dropdown.Item\n                        rightIcon='download'\n                        onClick={() => this.handleDownloadAllTemplates('tsv')}\n                      >\n                        TSV\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        rightIcon='download'\n                        onClick={() => this.handleDownloadAllTemplates('json')}\n                      >\n                        JSON\n                      </Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                )\n              }\n            </React.Fragment>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nDataModelStructure.propTypes = {\n  dataModelStructure: PropTypes.arrayOf(PropTypes.object),\n  isGraphView: PropTypes.bool,\n  onSetGraphView: PropTypes.func,\n  onSetOverlayPropertyTableHidden: PropTypes.func,\n  onResetGraphCanvas: PropTypes.func,\n  overlayPropertyHidden: PropTypes.bool,\n  downloadMultiTemplate: PropTypes.func,\n  excludedNodesForTemplates: PropTypes.arrayOf(PropTypes.string),\n  relatedNodeIDs: PropTypes.arrayOf(PropTypes.string),\n  allRoutes: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  clickingNodeName: PropTypes.string,\n  dictionaryVersion: PropTypes.string,\n};\n\nDataModelStructure.defaultProps = {\n  dataModelStructure: null,\n  isGraphView: true,\n  onSetGraphView: () => {},\n  onSetOverlayPropertyTableHidden: () => {},\n  onResetGraphCanvas: () => {},\n  overlayPropertyHidden: true,\n  downloadMultiTemplate,\n  excludedNodesForTemplates: ['program', 'project'],\n  relatedNodeIDs: [],\n  allRoutes: [],\n  clickingNodeName: '',\n  dictionaryVersion: 'Unknown',\n};\n\nexport default DataModelStructure;\n","import { connect } from 'react-redux';\nimport { setGraphView, setOverlayPropertyTableHidden, setNeedReset } from '../action.js';\nimport DataModelStructure from './DataModelStructure';\n\nconst ReduxDataModelStructure = (() => {\n  const mapStateToProps = state => ({\n    dataModelStructure: state.ddgraph.dataModelStructure,\n    isGraphView: state.ddgraph.isGraphView,\n    overlayPropertyHidden: state.ddgraph.overlayPropertyHidden,\n    relatedNodeIDs: state.ddgraph.dataModelStructureRelatedNodeIDs,\n    allRoutes: state.ddgraph.dataModelStructureAllRoutesBetween,\n    clickingNodeName: state.ddgraph.highlightingNode ? state.ddgraph.highlightingNode.label : '',\n    dictionaryVersion: state.versionInfo.dictionaryVersion,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onSetGraphView: isGraphView => dispatch(setGraphView(isGraphView)),\n    onSetOverlayPropertyTableHidden: hidden => dispatch(setOverlayPropertyTableHidden(hidden)),\n    onResetGraphCanvas: () => dispatch(setNeedReset(true)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(DataModelStructure);\n})();\n\nexport default ReduxDataModelStructure;\n","/**\n * Get subgroup links from link\n * @param {object} link - array of links\n * @param {object} nameToNode - key (node name) value (node object) map\n * @param {string} sourceId - source id for subgroup links\n * This function traverse links recursively and return all nested subgroup lnks\n */\nconst getSubgroupLinks = (link, nameToNode, sourceId) => {\n  let subgroupLinks = [];\n  if (link.subgroup) {\n    link.subgroup.forEach((sgLink) => {\n      if (sgLink.subgroup) {\n        subgroupLinks = subgroupLinks.concat(getSubgroupLinks(sgLink, nameToNode, sourceId));\n      } else {\n        subgroupLinks.push({\n          source: nameToNode[sourceId],\n          target: nameToNode[sgLink.target_type],\n          exists: 1,\n          ...sgLink,\n        });\n      }\n    });\n  }\n  return subgroupLinks;\n};\n\n/**\n * Given a data dictionary that defines a set of nodes\n *    and edges, returns the nodes and edges in correct format\n *\n * @method createNodesAndEdges\n * @param props: Object (normally taken from redux state) that includes dictionary\n *    property defining the dictionary as well as other optional properties\n *    such as counts_search and links_search (created by getCounts) with\n *    information about the number of each type (node) and link (between\n *    nodes with a link's source and target types) that actually\n *    exist in the data\n * @param createAll: Include all nodes and edges or only those that are populated in\n *    counts_search and links_search\n * @param nodesToHide: Array of nodes to hide from graph\n * @returns { nodes, edges } Object containing nodes and edges\n */\nexport function createNodesAndEdges(props, createAll, nodesToHide = ['program']) {\n  const dictionary = props.dictionary;\n  const nodes = Object.keys(dictionary).filter(\n    key => !key.startsWith('_') && dictionary[key].type === 'object'\n      && dictionary[key].category !== 'internal' && !nodesToHide.includes(key),\n  ).map(\n    (key) => {\n      let count = 0;\n      if (props.counts_search) {\n        count = props.counts_search[`_${key}_count`];\n      }\n      return {\n        name: dictionary[key].title,\n        count,\n        ...dictionary[key],\n      };\n    },\n  ).filter(\n    node => createAll || node.count !== 0,\n  );\n\n  const nameToNode = nodes.reduce((db, node) => { db[node.id] = node; return db; }, {});\n  const hideDb = nodesToHide.reduce((db, name) => { db[name] = true; return db; }, {});\n\n  const edges = nodes.filter(\n    node => node.links && node.links.length > 0,\n  )\n    .reduce( // add each node's links to the edge list\n      (list, node) => {\n        const newLinks = node.links.map(\n          link => ({ source: node, target: nameToNode[link.target_type], exists: 1, ...link }),\n        );\n        return list.concat(newLinks);\n      }, [])\n    .reduce( // add link subgroups to the edge list\n      (list, link) => {\n        let result = list;\n        if (link.target) { // \"subgroup\" link entries in dictionary are not links themselves ...\n          result.push(link);\n        }\n        if (link.subgroup) {\n          const sgLinks = getSubgroupLinks(link, nameToNode, link.source.id);\n          result = result.concat(sgLinks);\n        }\n        return result;\n      }, [])\n    .filter(\n    // target type exist and is not in hide list\n      link => (link.target && link.target.id in nameToNode && !(link.target.id in hideDb)))\n    .map(\n      (link) => {\n      // decorate each link with its \"exists\" count if available\n      //  (number of instances of link between source and target types in the data)\n        const res = link;\n        res.exists = props.links_search\n          ? props.links_search[`${res.source.id}_${res.name}_to_${res.target.id}_link`] :\n          undefined;\n        return res;\n      })\n    .filter(\n    // filter out if no instances of this link exists and createAll is not specified\n      link => createAll || link.exists || link.exists === undefined,\n    );\n  return {\n    nodes,\n    edges,\n  };\n}\n\n/**\n * Find the root of the given graph (no edges out)\n * @method findRoot\n * @param nodes\n * @param edges\n * @return {string} rootName or null if no root\n */\nexport function findRoot(nodes, edges) {\n  const couldBeRoot = edges.reduce(\n    (db, edge) => {\n      // At some point the d3 force layout converts\n      //   edge.source and edge.target into node references ...\n      const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\n      if (db[sourceName]) {\n        db[sourceName] = false;\n      }\n      return db;\n    },\n    // initialize emptyDb - any node could be the root\n    nodes.reduce((emptyDb, node) => { const res = emptyDb; res[node.id] = true; return res; }, {}),\n  );\n  const rootNode = nodes.find(n => couldBeRoot[n.id]);\n  return rootNode ? rootNode.id : null;\n}\n\n/**\n * Recursive helper function for getTreeHierarchy\n * Returns the hierarchy of the tree in the form of a map\n * Each (key, value) consists of (node, node's descendants including the node itself)\n * @method getTreeHierarchyHelper\n * @param root\n * @param name2EdgesIn\n * @param hierarchy\n * @return {map}\n */\nfunction getTreeHierarchyHelper(node, name2EdgesIn, hierarchy) {\n  const descendants = new Set();\n  descendants.add(node);\n  hierarchy.set(node, descendants);\n  name2EdgesIn[node].forEach((edge) => {\n    const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\n    if (!hierarchy.get(sourceName)) { // don't want to visit node again\n      hierarchy = getTreeHierarchyHelper(sourceName, name2EdgesIn, hierarchy);\n      descendants.add(sourceName);\n      hierarchy.get(sourceName).forEach((n) => {\n        descendants.add(n);\n      });\n    }\n  });\n  hierarchy.set(node, descendants);\n  return hierarchy;\n}\n\n/**\n * Returns the hierarchy of the tree in the form of a map\n * Each (key, value) consists of (node, node's descendants including the node itself)\n * @method getTreeHierarchy\n * @param root\n * @param name2EdgesIn\n * @return {map}\n */\nexport function getTreeHierarchy(root, name2EdgesIn) {\n  return getTreeHierarchyHelper(root, name2EdgesIn, new Map());\n}\n\n/**\n * Arrange nodes in dictionary graph breadth first, and build level database.\n * If a node links to multiple parents, then place it under the highest parent ...\n * Exported for testing.\n *\n * @param {Array} nodes\n * @param {Array} edges\n * @return { nodesBreadthFirst, treeLevel2Names, name2Level } where\n *          nodesBreadthFirst is array of node names, and\n *          treeLevel2Names is an array of arrays of node names,\n *          and name2Level is a mapping of node name to level\n */\nexport function nodesBreadthFirst(nodes, edges) {\n  const result = {\n    bfOrder: [],\n    treeLevel2Names: [],\n    name2Level: {},\n  };\n\n  // mapping of node name to edges that point into that node\n  const name2EdgesIn = edges.reduce(\n    (db, edge) => {\n      // At some point the d3 force layout converts edge.source\n      //   and edge.target into node references ...\n      const targetName = typeof edge.target === 'object' ? edge.target.id : edge.target;\n      if (db[targetName]) {\n        db[targetName].push(edge);\n      } else {\n        console.error(`Edge points to unknown node: ${targetName}`);\n      }\n      return db;\n    },\n    // initialize emptyDb - include nodes that have no incoming edges (leaves)\n    nodes.reduce((emptyDb, node) => { const res = emptyDb; res[node.id] = []; return res; }, {}),\n  );\n\n  // root node has no edges coming out of it, just edges coming in\n  const root = findRoot(nodes, edges);\n  if (!root) {\n    console.log('Could not find root of given graph');\n    return result;\n  }\n\n  const processedNodes = new Set(); // account for nodes that link to multiple other nodes\n  let queue = [];\n  queue.push({ query: root, level: 0 });\n\n  // just 2b safe - could be user gives us a graph without a 'project'\n  if (!name2EdgesIn[root]) {\n    name2EdgesIn[root] = [];\n  }\n\n  const name2ActualLvl = {};\n  const hierarchy = getTreeHierarchy(root, name2EdgesIn);\n  // Run through this once to determine the actual level of each node\n  for (let head = 0; head < queue.length; head += 1) {\n    const { query, level } = queue[head]; // breadth first\n    name2ActualLvl[query] = level;\n    // eslint-disable-next-line\n    name2EdgesIn[query].forEach((edge) => {\n      // At some point the d3 force layout converts edge.source\n      //   and edge.target into node references ...\n      const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\n      if (name2EdgesIn[sourceName]) {\n        const isAncestor = hierarchy.get(sourceName).has(query);\n        // only push node if it is not an ancestor of the current node, or else --> cycle\n        if (!isAncestor) {\n          queue.push({ query: sourceName, level: level + 1 });\n        }\n      } else {\n        console.log(`Edge comes from unknown node ${sourceName}`);\n      }\n    },\n    );\n  }\n\n  // Reset and run for real\n  // eslint-disable-next-line\n  queue = [];\n  queue.push({ query: root, level: 0 });\n\n  // queue.shift is O(n), so just keep pushing, and move the head\n  for (let head = 0; head < queue.length; head += 1) {\n    const { query, level } = queue[head]; // breadth first\n    result.bfOrder.push(query);\n    processedNodes.add(query);\n    if (result.treeLevel2Names.length <= level) {\n      result.treeLevel2Names.push([]);\n    }\n    result.treeLevel2Names[level].push(query);\n    result.name2Level[query] = level;\n    name2EdgesIn[query].forEach(\n      (edge) => {\n        // At some point the d3 force layout converts edge.source\n        //   and edge.target into node references ...\n        const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\n        if (name2EdgesIn[sourceName]) {\n          if (!processedNodes.has(sourceName) && name2ActualLvl[sourceName] === (level + 1)) {\n            //\n            // edge source has not yet been processed via another link from the source\n            // to a node higher in the graph\n            //\n            processedNodes.add(sourceName); // don't double-queue a node\n            queue.push({ query: sourceName, level: level + 1 });\n          }\n        } else {\n          console.log(`Edge comes from unknown node ${sourceName}`);\n        }\n      },\n    );\n  }\n  return result;\n}\n\n\n/**\n * Decorate the nodes of a graph with a position based on the node's position in the graph\n * Exported for testing.  Decorates nodes with position property array [x,y] on a [0,1) space\n *\n * @method assignNodePositions\n * @param nodes\n * @param edges\n * @param opts {breadthFirstInfo,numPerRow} breadthFirstInfo is output\n *          from nodesBreadthFirst - otherwise call it ourselves,\n *          numPerRow specifies number of nodes per row if we want a\n *          grid under the root rather than the tree structure\n */\nexport function assignNodePositions(nodes, edges, opts) {\n  const breadthFirstInfo = (opts && opts.breadthFirstInfo) ?\n    opts.breadthFirstInfo : nodesBreadthFirst(nodes, edges);\n  const name2Node = nodes.reduce((db, node) => {\n    const res = db; res[node.id] = node; return res;\n  }, {});\n\n  // the tree has some number of levels with some number of nodes each,\n  // but we may want to break each level down into multiple rows\n  // @return {rowNumber:[nodeNameList]}\n  const row2Names = (() => {\n    if (!opts || !opts.numPerRow) {\n      return breadthFirstInfo.treeLevel2Names;\n    }\n    const { numPerRow } = opts;\n    const { bfOrder } = breadthFirstInfo;\n    // put the root on its own level\n    return bfOrder.reduce(\n      (db, node) => {\n        if (db.length < 2) { // put root node on its own level\n          db.push([node]);\n        } else {\n          const lastRow = db[db.length - 1];\n          if (lastRow.length < numPerRow) {\n            lastRow.push(node);\n          } else {\n            db.push([node]);\n          }\n        }\n        return db;\n      }, [],\n    );\n  })();\n\n  // Assign a (x,y) position in [0,1) space to each node based on its level in the tree\n  const numLevels = row2Names.length;\n  row2Names.forEach(\n    (nodesAtLevel, level) => {\n      const numNodesAtLevel = nodesAtLevel.length;\n      nodesAtLevel.forEach(\n        (nodeName, posAtLevel) => {\n          const node = name2Node[nodeName];\n          node.position = [ // (x,y) in [0,1) coordinates\n            (posAtLevel + 1) / (numNodesAtLevel + 1),\n            (level + 1) / (numLevels + 1),\n          ];\n          node.positionIndex = [\n            posAtLevel, level,\n          ];\n        });\n    },\n  );\n  return breadthFirstInfo;\n}\n\n/**\n * convert graph structure to string using DOT language\n * DOT Language ref: http://www.graphviz.org/doc/info/lang.html\n * @param {Array} nodes\n * @param {Array} edges\n * @params {Object} treeLevel2Names - levels and nodes in each level, {levelNum:[nodeNameList]}\n * @returns {string} graph translated into DOT language\n */\nconst buildGraphVizDOTString = (nodes, edges, treeLevel2Names) => {\n  const whRatio = 1;\n  const canvasSize = 5;\n  const nodeWidth = 1.2;\n  const nodeHeight = 0.8;\n  let graphString = 'digraph dictionary {\\n';\n  graphString += `size=\"${canvasSize}, ${canvasSize}\"\\n`;\n  graphString += `ratio=${whRatio}\\n`;\n  nodes.forEach((node) => {\n    graphString += `${node.id} [type=\"${node.category}\" \\\nlabel=\"${node.name}\" \\\nfixedsize=true width=${nodeWidth} height=${nodeHeight} \\\nshape=rectangle\n]\\n`;\n  });\n  edges.forEach((edge) => {\n    graphString += `${edge.source.id} -> ${edge.target.id}[arrowhead=none tailport=s ]\\n`;\n  });\n  if (treeLevel2Names) {\n    treeLevel2Names.forEach((IDsInThisLevel, i) => {\n      graphString += `{rank=${i} ${IDsInThisLevel.join(' ')}}\\n`;\n    });\n  }\n  graphString += '}';\n  return graphString;\n};\n\nexport function createDotStrinByNodesEdges(nodes, edges) {\n  const posInfo = assignNodePositions(nodes, edges);\n  const dotString = buildGraphVizDOTString(nodes, edges, posInfo.treeLevel2Names);\n  return dotString;\n}\n","/**\n * @typedef {Object} Node\n * @property {string} id - ID of this node\n * @property {string[]} inLinks - array of soure node IDs that link to this node\n * @property {string[]} outLinks - array of target node IDs that are linked from this node\n */\n\n/**\n * @typedef {Object} Edge\n * @property {string} source - edge source node ID\n * @property {string} target - edge target node ID\n */\n\n/**\n * Get all descendent node IDs from a given node\n * @param {string} startingNodeID\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of descendent node IDs\n */\nexport const getAllChildrenNodeIDs = (startingNodeID, wholeGraphNodes) => {\n  const relatedNodeIDs = [];\n  const startingNode = wholeGraphNodes.find(n => n.id === startingNodeID);\n  let currentLevelNodeIDs = startingNode.outLinks;\n  while (currentLevelNodeIDs && currentLevelNodeIDs.length > 0) {\n    const nextLevelNodeIDs = [];\n    currentLevelNodeIDs.forEach((nodeId) => {\n      if (relatedNodeIDs.includes(nodeId) || nextLevelNodeIDs.includes(nodeId)) return;\n      relatedNodeIDs.push(nodeId);\n      const originNode = wholeGraphNodes.find(n => (n.id === nodeId));\n      const nextLevel = originNode.outLinks;\n      nextLevel.forEach((outNodeId) => {\n        nextLevelNodeIDs.push(outNodeId);\n      });\n    });\n    currentLevelNodeIDs = nextLevelNodeIDs;\n  }\n  return relatedNodeIDs;\n};\n\n/**\n * Get all children links from a given node\n * @param {string} startingNodeID\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {Edge[]} array of descendent links\n */\nexport const getAllChildrenLinks = (startingNodeID, wholeGraphNodes) => {\n  const startingNode = wholeGraphNodes.find(n => n.id === startingNodeID);\n  let currentLevelNodeIDs = startingNode.outLinks;\n  const relatedLinks = currentLevelNodeIDs.map(outID => ({\n    source: startingNode.id,\n    target: outID,\n  }));\n  const sourceNodeHistory = {};\n  while (currentLevelNodeIDs.length > 0) {\n    const nextLevelNodeIDs = [];\n    for (let i = 0; i < currentLevelNodeIDs.length; i += 1) {\n      const nodeID = currentLevelNodeIDs[i];\n      if (sourceNodeHistory[nodeID]) continue; // eslint-disable-line no-continue\n      const originNode = wholeGraphNodes.find(n => (n.id === nodeID));\n      const nextLevel = originNode.outLinks;\n      for (let j = 0; j < nextLevel.length; j += 1) {\n        const outNodeID = nextLevel[j];\n        relatedLinks.push({\n          source: nodeID,\n          target: outNodeID,\n        });\n        sourceNodeHistory[nodeID] = true;\n        nextLevelNodeIDs.push(outNodeID);\n      }\n    }\n    currentLevelNodeIDs = nextLevelNodeIDs;\n  }\n  return relatedLinks;\n};\n\n/**\n * Get all inlinks or outlinks for a given node, in subgraph\n * @param {string} nodeID - ID of the given node\n * @param {boolean} inOrOut - true: get inlinks, false: get outlinks\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of node IDs that are inlinks or outlinks of the given node\n */\nconst inOrOutLinksFromGivenNode = (\n  nodeID,\n  inOrOut,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const node = wholeGraphNodes.find(n => n.id === nodeID);\n  const links = inOrOut ? node.inLinks : node.outLinks;\n  const inLinksFilterFunc = (e, neighborNodeID) => (e.target === nodeID\n    && e.source === neighborNodeID\n    && subgraphNodeIDs.includes(e.source));\n  const outLinksFilterFunc = (e, neighborNodeID) => (e.source === nodeID\n    && e.target === neighborNodeID\n    && subgraphNodeIDs.includes(e.target));\n  return links.filter(neighborNodeID => subgraphNodeIDs.includes(neighborNodeID))\n    .filter(neighborNodeID => subgraphEdges.find((e) => {\n      if (inOrOut) return inLinksFilterFunc(e, neighborNodeID);\n      return outLinksFilterFunc(e, neighborNodeID);\n    }))\n    .filter(neighborNodeID => (neighborNodeID !== nodeID));\n};\n\n/**\n * Inside a subgraph, get all nodes that have no inlinks or outlinks\n * (inlinks of a node means links that is pointing at this node)\n * (node without inlinks means no other nodes inside subgraph is pointing at it)\n * (outlinks of a node means links that is starting from this node)\n * (node without outlinks means this node is not pointing at any other nodes in subgraph)\n * @param {boolean} inOrOut - true: get inlinks, false: get outlinks\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of node IDs that have no inlinks or outlinks\n */\nexport const getNodeIDsThatHaveNoInOrOutLinks = (\n  inOrOut,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const resultIDs = [];\n  subgraphNodeIDs.forEach((nodeID) => {\n    const links = inOrOutLinksFromGivenNode(\n      nodeID,\n      inOrOut,\n      subgraphNodeIDs,\n      subgraphEdges,\n      wholeGraphNodes,\n    );\n    if (!links || links.length === 0) {\n      resultIDs.push(nodeID);\n    }\n  });\n  return resultIDs;\n};\n\n/**\n * Judge if a given node is articulation node inside subgraph\n * (An articulation node of a graph is a node whose removal will disconnect the graph)\n * @param {string} targetNodeID - the target node to validate\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {boolean} whether this node is articulation node inside subgraph\n */\nexport const isArticulationNodeInSubgraph = (\n  targetNodeID,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  // step.1: calculate connected node count if there's no target node in subgraph\n  const nodeIdsWithoutInLinks = getNodeIDsThatHaveNoInOrOutLinks(\n    true,\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  if (nodeIdsWithoutInLinks.includes(targetNodeID)) return false;\n  let currentLevelNodeIDs = nodeIdsWithoutInLinks;\n  const nodeIDsInSubgraphWithoutTargetNode = [];\n  while (currentLevelNodeIDs.length > 0) {\n    const nextLevelNodeIDs = [];\n    currentLevelNodeIDs.forEach((nodeID) => {\n      if (nodeIDsInSubgraphWithoutTargetNode.includes(nodeID)\n        || nextLevelNodeIDs.includes(nodeID)) return;\n      nodeIDsInSubgraphWithoutTargetNode.push(nodeID);\n      const node = wholeGraphNodes.find(n => n.id === nodeID);\n      const inNeighbors = node.inLinks\n        .filter(inNodeID => subgraphEdges.find(e => e.source === inNodeID && e.target === nodeID));\n      const outNeighbors = node.outLinks.filter(outNodeID =>\n        subgraphEdges.find(e => e.target === outNodeID && e.source === nodeID));\n      const neighborNodeIDs = [...inNeighbors, ...outNeighbors];\n      neighborNodeIDs\n        .filter(nid => subgraphNodeIDs.includes(nid))\n        .filter(nid => (nid !== targetNodeID))\n        .forEach((nid) => {\n          nextLevelNodeIDs.push(nid);\n        });\n    });\n    currentLevelNodeIDs = nextLevelNodeIDs;\n  }\n\n  // step.2: if node count equals subgraph's node count - 1, then not articulation node\n  return (nodeIDsInSubgraphWithoutTargetNode.length !== subgraphNodeIDs.length - 1);\n};\n\n/**\n * Get all articulation node is articulation inside subgraph\n * (An articulation node of a graph is a node whose removal will disconnect the graph)\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of articulation node IDs inside subgraph\n */\nexport const getArticulationNodesInSubgraph = (\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const articulationNodeIDs = [];\n  subgraphNodeIDs.forEach((nodeID) => {\n    if (isArticulationNodeInSubgraph(\n      nodeID,\n      subgraphNodeIDs,\n      subgraphEdges,\n      wholeGraphNodes,\n    )) {\n      articulationNodeIDs.push(nodeID);\n    }\n  });\n  return articulationNodeIDs;\n};\n\n/**\n * Traverse a subgraph via breath Breadth-first search algorithm\n * @param {boolean} alongLinkDirection - if want traverse from link direction\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of node IDs in BFS traverse\n * Note that this function only consider union of `subgraphNodeIDs` and `subgraphEdges`,\n * if a node is in `subgraphEdges` but not in `subgraphNodeIDs`, it'll be ignored.\n */\nexport const BFSTraverseSubgraph = (\n  alongLinkDirection,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  let currentLevelNodeIDs = getNodeIDsThatHaveNoInOrOutLinks(\n    alongLinkDirection,\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  const resultNodeIDs = [];\n  while (currentLevelNodeIDs.length > 0) {\n    const nextLevelNodeIDs = [];\n    for (let i = 0; i < currentLevelNodeIDs.length; i += 1) {\n      const nodeID = currentLevelNodeIDs[i];\n      if (!resultNodeIDs.includes(nodeID)) resultNodeIDs.push(nodeID);\n      const node = wholeGraphNodes.find(n => n.id === nodeID);\n      if (node) {\n        const links = alongLinkDirection ? node.outLinks : node.inLinks;\n        const linkNeighbors = links.filter((neighborNodeID) => {\n          if (!subgraphNodeIDs.includes(neighborNodeID)) return false;\n          if (alongLinkDirection) {\n            return subgraphEdges.find(e => e.source === nodeID && neighborNodeID === e.target);\n          }\n\n          return subgraphEdges.find(e => e.target === nodeID && neighborNodeID === e.source);\n        });\n        for (let j = 0; j < linkNeighbors.length; j += 1) {\n          const neighborNodeID = linkNeighbors[j];\n          if (!currentLevelNodeIDs.includes(neighborNodeID)\n            && !nextLevelNodeIDs.includes(neighborNodeID)) {\n            nextLevelNodeIDs.push(neighborNodeID);\n          }\n        }\n      }\n    }\n    currentLevelNodeIDs = nextLevelNodeIDs;\n  }\n  return resultNodeIDs;\n};\n\n/**\n * Get topological sorting of an array of node inside subgraph\n * I.e., order nodes so that for each link A->B, A comes before B in the ordering\n * @param {string[]} nodeIDsToSort - array of node IDs to sort\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of node IDs in topological order\n */\nexport const sortNodesByTopology = (\n  nodeIDsToSort,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const graphBFSTraverse = BFSTraverseSubgraph(\n    true,\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  const sortedNodeIDs = graphBFSTraverse.filter(nodeID => nodeIDsToSort.includes(nodeID));\n  return sortedNodeIDs;\n};\n\n\n/**\n * Find a node that is descendent of all other nodes inside subgraph\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string} if find, return node ID, otherwise return null\n */\nexport const getSingleEndDescendentNodeID = (\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const nodeIDs = getNodeIDsThatHaveNoInOrOutLinks(\n    false,\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  if (nodeIDs.length === 1) return nodeIDs[0];\n  return null;\n};\n\n/**\n * @typedef {Object} Summary\n * @property {string[]} nodeIDs - array of node IDs between two given nodes\n * @property {Edge[]} links - array of links between two given nodes\n */\n/**\n * Get summary of how many nodes and links are between given two nodes inside subgraph\n * I.e., nodes and links along the route between given two nodes\n * @param {string} startingNodeID\n * @param {string} endingNodeID\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {Summary}\n */\nexport const getNodesAndLinksSummaryBetweenNodesInSubgraph = (\n  startingNodeID,\n  endingNodeID,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const startingNode = wholeGraphNodes.find(node => node.id === startingNodeID);\n  const betweenNodeIDs = [];\n  const firstLevelOutNodeIDs = startingNode.outLinks.filter(outNodeID =>\n    subgraphEdges.find(e => e.source === startingNodeID && e.target === outNodeID));\n  let currentLevelNodeIDs = firstLevelOutNodeIDs;\n  const betweenLinks = firstLevelOutNodeIDs.map(outID => ({\n    source: startingNodeID,\n    target: outID,\n  }));\n  while (currentLevelNodeIDs.length > 0) {\n    const nextLevelNodeIDs = [];\n    currentLevelNodeIDs.forEach((nodeID) => {\n      if (betweenNodeIDs.includes(nodeID)\n        || nextLevelNodeIDs.includes(nodeID)\n        || nodeID === endingNodeID\n      ) return;\n      betweenNodeIDs.push(nodeID);\n      const node = wholeGraphNodes.find(n => (n.id === nodeID));\n      const outNOdeIDsInSubgraph = node.outLinks\n        .filter(outNodeID => subgraphNodeIDs.includes(outNodeID))\n        .filter(outNodeID => subgraphEdges.find(e =>\n          e.source === nodeID && e.target === outNodeID));\n      outNOdeIDsInSubgraph.forEach((outNodeID) => {\n        betweenLinks.push({\n          source: nodeID,\n          target: outNodeID,\n        });\n      });\n      outNOdeIDsInSubgraph\n        .filter(outNodeID => outNodeID !== endingNodeID)\n        .forEach((outNodeID) => {\n          nextLevelNodeIDs.push(outNodeID);\n        });\n    });\n    currentLevelNodeIDs = nextLevelNodeIDs;\n  }\n  const sortedBetweenNodeIDs = BFSTraverseSubgraph(\n    false,\n    betweenNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  return {\n    nodeIDs: sortedBetweenNodeIDs,\n    links: betweenLinks,\n  };\n};\n\nexport const getAllRoutesBetweenTwoNodes = (\n  startingNodeID,\n  endingNodeID,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  const resultRoutes = [];\n  const takeOneStep = (curID, curPath) => {\n    if (curID === endingNodeID) {\n      const resultPath = Array.from(curPath);\n      resultPath.reverse(); // we actually want route from top to bottom\n      resultRoutes.push(resultPath);\n      return;\n    }\n    const curNode = wholeGraphNodes.find(n => n.id === curID);\n    curNode.outLinks.forEach((oid) => {\n      if (curPath.has(oid)) return; // avoid loop\n      if (!subgraphNodeIDs.includes(oid)) return;\n      if (!subgraphEdges.find(e => e.target === oid && e.source === curID)) return;\n      curPath.add(oid);\n      takeOneStep(oid, curPath);\n      curPath.delete(oid);\n    });\n  };\n  takeOneStep(startingNodeID, new Set([startingNodeID]));\n  return resultRoutes;\n};\n\n","import Viz from 'viz.js';\nimport { Module, render } from 'viz.js/full.render';\nimport _ from 'underscore';\nimport { createNodesAndEdges, createDotStrinByNodesEdges } from '../../../GraphUtils/utils';\nimport {\n  truncateLines,\n  graphStyleConfig,\n} from '../../utils';\nimport {\n  getAllChildrenNodeIDs,\n  getAllChildrenLinks,\n  getArticulationNodesInSubgraph,\n  sortNodesByTopology,\n  getSingleEndDescendentNodeID,\n  getNodesAndLinksSummaryBetweenNodesInSubgraph,\n  getAllRoutesBetweenTwoNodes,\n} from './graphStructureHelper.js';\nimport { getCategoryColor } from '../../NodeCategories/helper';\n\n/**\n * Get a set of types from an array of nodes\n * @param {Node[]} nodes\n * @returns {string[]} array of type names(duplicating names removed) of given nodes\n */\nexport const getAllTypes = (nodes) => {\n  const types = nodes.map(node => node.type);\n  const uniqueTypes = _.uniq(types);\n  return uniqueTypes;\n};\n\n/* eslint-disable no-underscore-dangle */\nexport const calculateGraphLayout = (dictionary, countsSearch, linksSearch) => {\n  const { nodes, edges } = createNodesAndEdges({\n    dictionary,\n    counts_search: countsSearch,\n    links_search: linksSearch,\n  }, true, []);\n  const dotString = createDotStrinByNodesEdges(nodes, edges);\n  const viz = new Viz({ Module, render });\n  return viz.renderJSONObject(dotString)\n    .then((renderedJSON) => {\n      // draw nodes\n      const renderedNodes = renderedJSON.objects\n        .filter(n => !n.rank)\n        .map((n) => {\n          const boundingBox = n._draw_[1].points.reduce((acc, cur) => {\n            if (acc.x1 > cur[0]) acc.x1 = cur[0];\n            if (acc.y1 > cur[1]) acc.y1 = cur[1];\n            if (acc.x2 < cur[0]) acc.x2 = cur[0];\n            if (acc.y2 < cur[1]) acc.y2 = cur[1];\n            return acc;\n          }, {\n            x1: Infinity,\n            y1: Infinity,\n            x2: -Infinity,\n            y2: -Infinity,\n          });\n          const iconRadius = graphStyleConfig.nodeIconRadius;\n          const topCenterX = (boundingBox.x1 + boundingBox.x2) / 2;\n          const topCenterY = boundingBox.y1;\n          const width = boundingBox.x2 - boundingBox.x1;\n          const height = boundingBox.y2 - boundingBox.y1;\n          const originNode = nodes.find(node => node.id === n.name);\n          const outLinks = edges\n            .filter(edge => edge.source.id === n.name)\n            .map(edge => edge.target.id);\n          const inLinks = edges\n            .filter(edge => edge.target.id === n.name)\n            .map(edge => edge.source.id);\n\n          const nodeType = n.type.toLowerCase();\n          const nodeColor = getCategoryColor(nodeType);\n          const textPadding = graphStyleConfig.nodeContentPadding;\n          const fontSize = graphStyleConfig.nodeTextFontSize;\n          const textLineGap = graphStyleConfig.nodeTextLineGap;\n          const nodeNames = truncateLines(n.label);\n          const rectMinHeight = height;\n          const rectHeight = Math.max(\n            rectMinHeight,\n            (textPadding * 2) + (nodeNames.length * (fontSize + textLineGap)),\n          );\n          const requiredPropertiesCount = originNode.required ? originNode.required.length : 0;\n          const optionalPropertiesCount = originNode.properties ?\n            Object.keys(originNode.properties).length - requiredPropertiesCount : 0;\n          let nodeLevel = 0;\n          if (originNode && originNode.positionIndex && originNode.positionIndex.length >= 2) {\n            nodeLevel = originNode.positionIndex[1];\n          }\n          return {\n            id: n.name,\n            type: nodeType,\n            boundingBox,\n            topCenterX,\n            topCenterY,\n            width,\n            height: rectHeight,\n            color: nodeColor,\n            iconRadius,\n            textPadding,\n            fontSize,\n            textLineGap,\n            names: nodeNames,\n            label: n.label,\n            level: nodeLevel,\n            outLinks,\n            inLinks,\n            _gvid: n._gvid,\n            requiredPropertiesCount,\n            optionalPropertiesCount,\n          };\n        });\n\n      // draw edges\n      const renderedEdges = renderedJSON.edges\n        .map((edge) => {\n          const controlPoints = edge._draw_[1].points;\n          let pathString = `M${controlPoints[0].join(',')}C${controlPoints.slice(1)\n            .map(pair => `${pair[0]},${pair[1]}`).join(' ')}`;\n          const sourceNode = renderedNodes.find(node => node._gvid === edge.tail);\n          const targetNode = renderedNodes.find(node => node._gvid === edge.head);\n          if (sourceNode.level === targetNode.level + 1) {\n            const sourePosition = [\n              (sourceNode.boundingBox.x1 + sourceNode.boundingBox.x2) / 2,\n              sourceNode.boundingBox.y1,\n            ];\n            const targetPosition = [\n              (targetNode.boundingBox.x1 + targetNode.boundingBox.x2) / 2,\n              targetNode.boundingBox.y2,\n            ];\n            pathString = `M${sourePosition[0]} ${sourePosition[1]} \n              L ${targetPosition[0]} ${targetPosition[1]}`;\n          }\n          const required = edges\n            .find(e => (e.source.id === sourceNode.id && e.target.id === targetNode.id))\n            .required;\n          return {\n            source: sourceNode.id,\n            target: targetNode.id,\n            controlPoints,\n            pathString,\n            required,\n          };\n        });\n\n      // get bounding box for whole graph\n      const graphBoundingBox = renderedJSON._draw_.find(entry => entry.op === 'P').points;\n\n      const layoutResult = {\n        nodes: renderedNodes,\n        edges: renderedEdges,\n        graphBoundingBox,\n      };\n      return layoutResult;\n    })\n    .catch((e) => {\n      throw e;\n    });\n};\n/* eslint-enable no-underscore-dangle */\n\n/**\n * Get all node IDs that are descendent of the first highlighting node\n * @param {Node} highlightingNode - the first highlighting node\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {string[]} array of node IDs that are descendent of the first highlighting node\n */\nexport const calculateHighlightRelatedNodeIDs = (\n  highlightingNode,\n  wholeGraphNodes,\n) => {\n  if (!highlightingNode) {\n    return [];\n  }\n  const relatedNodeIDs = getAllChildrenNodeIDs(highlightingNode.id, wholeGraphNodes);\n  if (!relatedNodeIDs.includes(highlightingNode.id)) {\n    return [highlightingNode.id, ...relatedNodeIDs];\n  }\n  return relatedNodeIDs;\n};\n\n/**\n * Get all routes that pass the second highlighting node and ends at the first highlighting node\n * @param {Node} highlightingNode - the first highlighting node\n * @param {string} secondHighlightingNodeID - the second highlighting node ID\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {Edge[]} array of links along  routes that pass\n *                   the second and ends at the first highlighting node\n */\nexport const calculatePathRelatedToSecondHighlightingNode = (\n  highlightingNode,\n  secondHighlightingNodeID,\n  wholeGraphNodes,\n) => {\n  if (!highlightingNode || !secondHighlightingNodeID) {\n    return [];\n  }\n  const pathRelatedToSecondHighlightingNode = getAllChildrenLinks(\n    secondHighlightingNodeID,\n    wholeGraphNodes,\n  );\n  pathRelatedToSecondHighlightingNode.push({\n    source: highlightingNode.id,\n    target: secondHighlightingNodeID,\n  });\n  return pathRelatedToSecondHighlightingNode;\n};\n\n/**\n * For a given node in subgraph, summary about how do its descendent structure look like.\n * I.e., which nodes along the descendent structure, and how many nodes/links between.\n * (A node's descendent structure means nodes and links that are started from this node)\n * @param {Node} startingNode\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\n * @returns {Object[]} array of ordered items, each refers to a descendent node,\n *                     its category, nodes and links between this item and previous item\n * Calculating process:\n *    step.1: find all critical nodes in subgraph\n             (critical nodes here means all articulation nodes in subgraph and the starting node)\n *    step.2: sort those nodes by linking order (source nodes come before target node)\n *    step.3: if there's a single node that is also descendent to all other node, add it to list\n *    step.4: for all nodes in critical node list, get summary description for all pairs\n *           of neighbor nodes (summary description means how many nodes and links between)\n *    step.4.1 (optional): if there isn't a single descendent node, get summary description\n *           for all of the rest nodes\n *    step.5: if there is a single descendent node, get all routes between this node and\n *           the starting Node\n *    step.6: return final data model structure\n */\nexport const calculateDataModelStructure = (\n  startingNode,\n  subgraphNodeIDs,\n  subgraphEdges,\n  wholeGraphNodes,\n) => {\n  if (!startingNode) return null;\n  const startingNodeID = startingNode.id;\n  // step.1\n  const articulationNodeIDs = getArticulationNodesInSubgraph(\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  const unsortedCriticalNodeIDs = articulationNodeIDs.includes(startingNodeID)\n    ? articulationNodeIDs : [...articulationNodeIDs, startingNodeID];\n  if (!unsortedCriticalNodeIDs || unsortedCriticalNodeIDs.length === 0) return null;\n\n  // step.2\n  const sortedCriticalNodeIDs = sortNodesByTopology(\n    unsortedCriticalNodeIDs,\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  if (!sortedCriticalNodeIDs || sortedCriticalNodeIDs.length === 0) { // loop in graph\n    return null;\n  }\n  const resultCriticalNodeIDs = sortedCriticalNodeIDs;\n\n  // step.3 if there's a single end descendent node\n  const singleDescendentNodeID = getSingleEndDescendentNodeID(\n    subgraphNodeIDs,\n    subgraphEdges,\n    wholeGraphNodes,\n  );\n  // add single descendent node if not counted in critical nodes list\n  if (singleDescendentNodeID && !resultCriticalNodeIDs.includes(singleDescendentNodeID)) {\n    resultCriticalNodeIDs.push(singleDescendentNodeID);\n  }\n\n  // step.4\n  let resultStructure = [];\n  for (let i = 1; i < resultCriticalNodeIDs.length; i += 1) {\n    const { nodeIDs, links } = getNodesAndLinksSummaryBetweenNodesInSubgraph(\n      resultCriticalNodeIDs[i - 1],\n      resultCriticalNodeIDs[i],\n      subgraphNodeIDs,\n      subgraphEdges,\n      wholeGraphNodes,\n    );\n    resultStructure.push({\n      nodeID: resultCriticalNodeIDs[i - 1],\n      nodeIDsBefore: nodeIDs,\n      linksBefore: links,\n    });\n  }\n\n  let routesBetweenStartEndNodes = [];\n  if (singleDescendentNodeID) {\n    resultStructure.push({\n      nodeID: singleDescendentNodeID,\n      nodeIDsBefore: [],\n      linksBefore: [],\n    });\n    // step.5 get all routes between the starting node and this single descendent node\n    routesBetweenStartEndNodes = getAllRoutesBetweenTwoNodes(\n      startingNodeID,\n      singleDescendentNodeID,\n      subgraphNodeIDs,\n      subgraphEdges,\n      wholeGraphNodes,\n    );\n  } else {\n    // step.4.1 (optional)\n    // Summary for all rest descendent nodes after last critical node\n    // (normally we won't need this step, because there should be only one single last\n    // descendent node (root note) \"program\", just in case that more than one appear in graph)\n    const lastCriticalNodeID = resultCriticalNodeIDs[resultCriticalNodeIDs.length - 1];\n    const nodeIDsBeforeNode = getAllChildrenNodeIDs(\n      lastCriticalNodeID,\n      wholeGraphNodes,\n    );\n    const linksBeforeNode = getAllChildrenLinks(\n      lastCriticalNodeID,\n      wholeGraphNodes,\n    );\n    resultStructure.push({\n      nodeID: lastCriticalNodeID,\n      nodeIDsBefore: nodeIDsBeforeNode,\n      linksBefore: linksBeforeNode,\n    });\n\n    // step.5.1 (optional)\n    // Get all routes between the starting node and the all rest descendent nodes\n    // (normally we won't need this step, because there should be only one single last\n    // descendent node (root note) \"program\", just in case that more than one appear in graph)\n    nodeIDsBeforeNode.forEach((nid) => {\n      routesBetweenStartEndNodes = routesBetweenStartEndNodes.concat(getAllRoutesBetweenTwoNodes(\n        startingNodeID,\n        nid,\n        subgraphNodeIDs,\n        subgraphEdges,\n        wholeGraphNodes,\n      ));\n    });\n  }\n\n  // step.6\n  resultStructure = resultStructure.map((entry) => {\n    const { nodeID, nodeIDsBefore, linksBefore } = entry;\n    const category = wholeGraphNodes.find(n => n.id === nodeID).type;\n    return {\n      nodeID,\n      nodeIDsBefore,\n      linksBefore,\n      category,\n    };\n  }).reverse();\n  return {\n    dataModelStructure: resultStructure,\n    routesBetweenStartEndNodes,\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  getAllTypes,\n  calculateGraphLayout,\n  calculatePathRelatedToSecondHighlightingNode,\n  calculateHighlightRelatedNodeIDs,\n  calculateDataModelStructure,\n} from './graphCalculatorHelper';\n\nclass GraphCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.oldHighlightingNode = null;\n    this.oldSecondHighlightingNodeID = null;\n  }\n\n  componentDidMount() {\n    if (!this.props.layoutInitialized) {\n      calculateGraphLayout(\n        this.props.dictionary,\n        this.props.countsSearch,\n        this.props.linksSearch,\n      ).then((layoutResult) => {\n        this.props.onGraphLayoutCalculated(layoutResult);\n        const legendItems = getAllTypes(layoutResult.nodes);\n        this.props.onGraphLegendCalculated(legendItems);\n      });\n    }\n  }\n\n  componentWillUpdate(nextProps) {\n    // if the highlighted node is updated, calculate related highlighted nodes\n    const newHighlightingNode = nextProps.highlightingNode;\n    const newSecondHighlightingNodeID = nextProps.secondHighlightingNodeID;\n    if (this.oldHighlightingNode !== newHighlightingNode) {\n      const relatedHighlightedNodeIDs = calculateHighlightRelatedNodeIDs(\n        newHighlightingNode,\n        this.props.nodes,\n      );\n      this.props.onHighlightRelatedNodesCalculated(relatedHighlightedNodeIDs);\n      const secondHighlightingNodeCandidateIDs = newHighlightingNode\n        ? newHighlightingNode.outLinks : [];\n      this.props.onSecondHighlightingNodeCandidateIDsCalculated(secondHighlightingNodeCandidateIDs);\n    }\n\n    // if the second highlighting node is updated, calculate related highlighting nodes\n    if (this.oldSecondHighlightingNodeID !== newSecondHighlightingNodeID) {\n      const pathRelatedToSecondHighlightingNode = calculatePathRelatedToSecondHighlightingNode(\n        newHighlightingNode,\n        newSecondHighlightingNodeID,\n        this.props.nodes,\n      );\n      this.props.onPathRelatedToSecondHighlightingNodeCalculated(\n        pathRelatedToSecondHighlightingNode);\n    }\n\n    // update data model structure if update highlighting/secondHighlighting node\n    if (this.oldHighlightingNode !== newHighlightingNode\n      || this.oldSecondHighlightingNodeID !== newSecondHighlightingNodeID\n    ) {\n      if (newSecondHighlightingNodeID) {\n        const {\n          dataModelStructure,\n          dataModelStructureRelatedNodeIDs,\n          routesBetweenStartEndNodes,\n        } = this.getDataModelStructureForSecondHighlightingNodes(\n          newHighlightingNode,\n          newSecondHighlightingNodeID,\n        );\n        this.props.onDataModelStructureCalculated(\n          dataModelStructure,\n          dataModelStructureRelatedNodeIDs,\n          routesBetweenStartEndNodes,\n        );\n      } else if (newHighlightingNode) {\n        const {\n          dataModelStructure,\n          dataModelStructureRelatedNodeIDs,\n          routesBetweenStartEndNodes,\n        } = this.getDataModelStructureForHighlightedNodes(\n          newHighlightingNode,\n        );\n        this.props.onDataModelStructureCalculated(\n          dataModelStructure,\n          dataModelStructureRelatedNodeIDs,\n          routesBetweenStartEndNodes,\n        );\n      } else {\n        this.props.onDataModelStructureCalculated(null);\n      }\n    }\n\n    this.oldHighlightingNode = newHighlightingNode;\n    this.oldSecondHighlightingNodeID = newSecondHighlightingNodeID;\n  }\n\n  getDataModelStructureForHighlightedNodes(newHighlightingNode) {\n    const relatedHighlightedNodeIDs = calculateHighlightRelatedNodeIDs(\n      newHighlightingNode,\n      this.props.nodes,\n    );\n    const subgraphEdges = this.props.edges\n      .filter(e => (relatedHighlightedNodeIDs.includes(e.source)\n        && relatedHighlightedNodeIDs.includes(e.target)))\n      .map(e => ({ source: e.source, target: e.target }));\n    const {\n      dataModelStructure,\n      routesBetweenStartEndNodes,\n    } = calculateDataModelStructure(\n      newHighlightingNode,\n      relatedHighlightedNodeIDs,\n      subgraphEdges,\n      this.props.nodes,\n    );\n    return {\n      dataModelStructure,\n      dataModelStructureRelatedNodeIDs: relatedHighlightedNodeIDs,\n      routesBetweenStartEndNodes,\n    };\n  }\n\n  getDataModelStructureForSecondHighlightingNodes(\n    newHighlightingNode,\n    newSecondHighlightingNodeID,\n  ) {\n    const subgraphNodeIDs = [];\n    const pathRelatedToSecondHighlightingNode = calculatePathRelatedToSecondHighlightingNode(\n      newHighlightingNode,\n      newSecondHighlightingNodeID,\n      this.props.nodes,\n    );\n    pathRelatedToSecondHighlightingNode.forEach((e) => {\n      if (!subgraphNodeIDs.includes(e.source)) subgraphNodeIDs.push(e.source);\n      if (!subgraphNodeIDs.includes(e.target)) subgraphNodeIDs.push(e.target);\n    });\n    const {\n      dataModelStructure,\n      routesBetweenStartEndNodes,\n    } = calculateDataModelStructure(\n      newHighlightingNode,\n      subgraphNodeIDs,\n      pathRelatedToSecondHighlightingNode,\n      this.props.nodes,\n    );\n    return {\n      dataModelStructure,\n      dataModelStructureRelatedNodeIDs: subgraphNodeIDs,\n      routesBetweenStartEndNodes,\n    };\n  }\n\n  render() {\n    return (<React.Fragment />);\n  }\n}\n\nGraphCalculator.propTypes = {\n  dictionary: PropTypes.object,\n  countsSearch: PropTypes.array,\n  linksSearch: PropTypes.array,\n  onGraphLayoutCalculated: PropTypes.func,\n  onGraphLegendCalculated: PropTypes.func,\n  nodes: PropTypes.arrayOf(PropTypes.object),\n  edges: PropTypes.arrayOf(PropTypes.object),\n  highlightingNode: PropTypes.object,\n  onHighlightRelatedNodesCalculated: PropTypes.func,\n  onSecondHighlightingNodeCandidateIDsCalculated: PropTypes.func,\n  secondHighlightingNodeID: PropTypes.string,\n  onPathRelatedToSecondHighlightingNodeCalculated: PropTypes.func,\n  onDataModelStructureCalculated: PropTypes.func,\n  layoutInitialized: PropTypes.bool,\n};\n\nGraphCalculator.defaultProps = {\n  dictionary: {},\n  countsSearch: [],\n  linksSearch: [],\n  onGraphLayoutCalculated: () => {},\n  onGraphLegendCalculated: () => {},\n  highlightingNode: null,\n  nodes: [],\n  edges: [],\n  onHighlightRelatedNodesCalculated: () => {},\n  secondHighlightingNodeID: null,\n  onSecondHighlightingNodeCandidateIDsCalculated: () => {},\n  onPathRelatedToSecondHighlightingNodeCalculated: () => {},\n  onDataModelStructureCalculated: () => {},\n  layoutInitialized: false,\n};\n\nexport default GraphCalculator;\n","import { connect } from 'react-redux';\nimport GraphCalculator from './GraphCalculator';\nimport {\n  setGraphLayout,\n  setGraphLegend,\n  setRelatedNodeIDs,\n  setSecondHighlightingNodeCandidateIDs,\n  setPathRelatedToSecondHighlightingNode,\n  setDataModelStructure,\n} from '../../action';\n\nconst ReduxGraphCalculator = (() => {\n  const mapStateToProps = state => ({\n    dictionary: state.submission.dictionary,\n    countsSearch: state.submission.counts_search,\n    linksSearch: state.submission.links_search,\n    highlightingNode: state.ddgraph.highlightingNode,\n    nodes: state.ddgraph.nodes,\n    edges: state.ddgraph.edges,\n    secondHighlightingNodeID: state.ddgraph.secondHighlightingNodeID,\n    layoutInitialized: state.ddgraph.layoutInitialized,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onGraphLayoutCalculated: layout => dispatch(setGraphLayout(layout)),\n    onGraphLegendCalculated: legendItems => dispatch(setGraphLegend(legendItems)),\n    onHighlightRelatedNodesCalculated: relatedNodeIDs =>\n      dispatch(setRelatedNodeIDs(relatedNodeIDs)),\n    onSecondHighlightingNodeCandidateIDsCalculated: secondHighlightingNodeCandidateIDs =>\n      dispatch(setSecondHighlightingNodeCandidateIDs(secondHighlightingNodeCandidateIDs)),\n    onPathRelatedToSecondHighlightingNodeCalculated: pathRelatedToSecondHighlightingNode =>\n      dispatch(setPathRelatedToSecondHighlightingNode(pathRelatedToSecondHighlightingNode)),\n    onDataModelStructureCalculated: (\n      dataModelStructure,\n      dataModelStructureRelatedNodeIDs,\n      routesBetweenStartEndNodes,\n    ) =>\n      dispatch(setDataModelStructure(\n        dataModelStructure,\n        dataModelStructureRelatedNodeIDs,\n        routesBetweenStartEndNodes,\n      )),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(GraphCalculator);\n})();\n\nexport default ReduxGraphCalculator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { capitalizeFirstLetter } from '../../../utils';\nimport { getCategoryIconSVG, getCategoryColor } from '../../NodeCategories/helper';\nimport './Legend.css';\n\nclass Legend extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n\n  toggleLegend = () => {\n    this.setState(state => ({\n      show: !state.show,\n    }));\n  }\n\n  render() {\n    return (\n      <div className={`data-dictionary-graph-legend ${this.state.show ? '' : 'data-dictionary-graph-legend--toggled'}`}>\n        {\n          this.state.show ?\n            (\n              <React.Fragment>\n                <i\n                  className='data-dictionary-graph-legend__close g3-icon g3-icon--cross'\n                  onClick={this.toggleLegend}\n                  onKeyPress={this.toggleLegend}\n                  role='button'\n                  tabIndex={0}\n                />\n                <div className='data-dictionary-graph-legend__item body'>\n                  <i className='data-dictionary-graph-legend__required-icon data-dictionary-graph-legend__required-icon--required g3-icon g3-icon--minus' />\n                  <span className='data-dictionary-graph-legend__text'>Required Link</span>\n                </div>\n                <div className='data-dictionary-graph-legend__item body'>\n                  <i className='data-dictionary-graph-legend__required-icon data-dictionary-graph-legend__required-icon g3-icon g3-icon--minus' />\n                  <span className='data-dictionary-graph-legend__text'>Optional Link</span>\n                </div>\n                {\n                  this.props.items.map((category) => {\n                    const itemColor = getCategoryColor(category);\n                    const IconSvg = getCategoryIconSVG(category);\n                    return (\n                      <div\n                        key={category}\n                        className='data-dictionary-graph-legend__item body'\n                      >\n                        <span className='data-dictionary-graph-legend__circle-wrapper'>\n                          {\n                            IconSvg ? <IconSvg /> : (\n                              <span\n                                className='data-dictionary-graph-legend__circle'\n                                style={{ backgroundColor: itemColor }}\n                              />\n                            )\n                          }\n                        </span>\n                        <span className='data-dictionary-graph-legend__text'>{capitalizeFirstLetter(category)}</span>\n                      </div>\n                    );\n                  })\n                }\n              </React.Fragment>\n            )\n            : (\n              <span\n                className='data-dictionary-graph-legend__info'\n                onClick={this.toggleLegend}\n                onKeyPress={this.toggleLegend}\n                role='button'\n                tabIndex={0}\n              >\n                <i className='data-dictionary-graph-legend__info-icon g3-icon g3-icon--question-mark' />\n              </span>\n            )\n        }\n      </div>\n    );\n  }\n}\n\nLegend.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.string),\n};\n\nLegend.defaultProps = {\n  items: [],\n};\n\nexport default Legend;\n","import { connect } from 'react-redux';\nimport Legend from './Legend';\n\nconst ReduxLegend = (() => {\n  const mapStateToProps = state => ({\n    items: state.ddgraph.legendItems,\n  });\n\n  return connect(mapStateToProps)(Legend);\n})();\n\nexport default ReduxLegend;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { select, event } from 'd3-selection';\nimport { transition } from 'd3-transition';\nimport { easeLinear } from 'd3-ease';\nimport { zoom, zoomTransform, zoomIdentity } from 'd3-zoom';\n\nimport './Canvas.css';\n\nconst d3 = {\n  select,\n  zoom,\n  zoomTransform,\n  zoomIdentity,\n  transition,\n  easeLinear,\n  get event() { return event; }, // https://stackoverflow.com/a/40048292\n};\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasWidth: 0,\n      canvasHeight: 0,\n    };\n    this.canvasElement = React.createRef();\n    this.svgElement = React.createRef();\n    this.containerElement = React.createRef();\n    this.transition = d3.transition()\n      .duration(150)\n      .ease(d3.easeLinear);\n  }\n\n  componentDidMount() {\n    this.zoomBehavior = d3.zoom()\n      .scaleExtent([this.props.minZoom, this.props.maxZoom])\n      .translateExtent([this.props.topLeftTranslateLimit, this.props.bottomRightTranslateLimit])\n      .on('zoom', () => {\n        this.handleCanvasUpdate();\n        this.zoomTarget\n          .attr('transform', d3.event.transform);\n      });\n    this.zoomTarget = d3.select('.canvas__container');\n    this.zoomCatcher = d3.select('.canvas__overlay')\n      .style('fill', 'none')\n      .style('pointer-events', 'all')\n      .call(this.zoomBehavior);\n    this.updateCanvasSize();\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentDidUpdate() {\n    if (this.props.needReset) {\n      this.handleReset();\n      this.props.onResetCanvasFinished();\n    }\n  }\n\n  componentWillUnmount() {\n    d3.select('.canvas__overlay')\n      .on('.zoom', null);\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleResize = () => {\n    if (this.props.isGraphView) {\n      this.updateCanvasSize();\n    }\n  }\n\n  updateCanvasSize() {\n    this.setState({\n      canvasWidth: this.canvasElement.current.clientWidth,\n      canvasHeight: this.canvasElement.current.clientHeight,\n    });\n    this.handleCanvasUpdate();\n  }\n\n  handleCanvasUpdate = () => {\n    const canvasBoundingRect = this.canvasElement.current.getBoundingClientRect();\n    this.props.onCanvasBoundingBoxUpdate(canvasBoundingRect);\n  }\n\n  handleClick = () => {\n    this.props.onClickBlankSpace();\n  }\n\n  zoomAction = (k) => {\n    const transform = d3.zoomTransform(this.zoomCatcher.node());\n\n    // if zoomin (k>1), translate toward negative direction, if zoomout, toward positive\n    const translateSign = k > 1 ? -1 : +1;\n\n    this.zoomCatcher\n      .transition(this.transition)\n      .call(\n        this.zoomBehavior.transform,\n        transform\n          .translate(\n            translateSign * (this.state.canvasWidth / 2) * Math.abs(k - 1),\n            translateSign * (this.state.canvasHeight / 2) * Math.abs(k - 1),\n          )\n          .scale(k),\n      );\n  }\n\n  handleZoomIn = () => {\n    this.zoomAction(1.2);\n  }\n\n  handleZoomOut = () => {\n    this.zoomAction(0.8);\n  }\n\n  handleReset = () => {\n    this.zoomCatcher\n      .transition(this.transition)\n      .call(this.zoomBehavior.transform, d3.zoomIdentity);\n  }\n\n  render() {\n    return (\n      <div className='canvas' ref={this.canvasElement} style={{ width: '100%', height: '100%' }}>\n        <div className='canvas__zoom-button-group'>\n          <div\n            className='canvas__zoom-button canvas__zoom-button--reset'\n            onClick={this.handleReset}\n            onKeyPress={this.handleReset}\n            role='button'\n            tabIndex={-1}\n          >\n            <i className='canvas__zoom-icon g3-icon g3-icon--reset' />\n          </div>\n          <div\n            className='canvas__zoom-button canvas__zoom-button--zoom-in'\n            onClick={this.handleZoomIn}\n            onKeyPress={this.handleZoomIn}\n            role='button'\n            tabIndex={-1}\n          >\n            <i className='canvas__zoom-icon g3-icon g3-icon--plus' />\n          </div>\n          <div\n            className='canvas__zoom-button canvas__zoom-button--zoom-out'\n            onClick={this.handleZoomOut}\n            onKeyPress={this.handleZoomOut}\n            role='button'\n            tabIndex={-1}\n          >\n            <i className='canvas__zoom-icon canvas__zoom-icon--zoom-in g3-icon g3-icon--minus' />\n          </div>\n        </div>\n        <svg\n          className='canvas__svg'\n          ref={this.svgElement}\n          width={this.state.canvasWidth}\n          height={this.state.canvasHeight}\n        >\n          <rect\n            className='canvas__overlay'\n            width={this.state.canvasWidth}\n            height={this.state.canvasHeight}\n            onClick={this.handleClick}\n          />\n          <g\n            className='canvas__container'\n            ref={this.containerElement}\n          >\n            {\n              React.Children.map(this.props.children, child => React.cloneElement(child, {\n                canvasWidth: this.state.canvasWidth,\n                canvasHeight: this.state.canvasHeight,\n              }),\n              )\n            }\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nCanvas.propTypes = {\n  minZoom: PropTypes.number,\n  maxZoom: PropTypes.number,\n  topLeftTranslateLimit: PropTypes.arrayOf(PropTypes.number),\n  bottomRightTranslateLimit: PropTypes.arrayOf(PropTypes.number),\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  onClickBlankSpace: PropTypes.func,\n  onCanvasBoundingBoxUpdate: PropTypes.func,\n  isGraphView: PropTypes.bool,\n  needReset: PropTypes.bool,\n  onResetCanvasFinished: PropTypes.func,\n};\n\nCanvas.defaultProps = {\n  minZoom: 0.1,\n  maxZoom: 10,\n  topLeftTranslateLimit: [-Infinity, -Infinity],\n  bottomRightTranslateLimit: [+Infinity, +Infinity],\n  onClickBlankSpace: () => {},\n  onCanvasBoundingBoxUpdate: () => {},\n  isGraphView: true,\n  needReset: false,\n  onResetCanvasFinished: () => {},\n};\n\nexport default Canvas;\n","import { connect } from 'react-redux';\nimport { clickBlankSpace, setCanvasBoundingRect, setNeedReset } from '../../action';\nimport Canvas from './Canvas';\n\nconst ReduxCanvas = (() => {\n  const mapStateToProps = state => ({\n    isGraphView: state.ddgraph.isGraphView,\n    needReset: state.ddgraph.needReset,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onClickBlankSpace: () => dispatch(clickBlankSpace()),\n    onCanvasBoundingBoxUpdate:\n      canvasBoundingRect => dispatch(setCanvasBoundingRect(canvasBoundingRect)),\n    onResetCanvasFinished: () => dispatch(setNeedReset(false)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(Canvas);\n})();\n\nexport default ReduxCanvas;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getCategoryIconSVG } from '../../NodeCategories/helper';\nimport { MatchedIndicesShape } from '../../utils';\nimport { getNodeTitleSVGFragment } from '../../highlightHelper';\nimport './GraphNode.css';\n\nclass GraphNode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.svgElement = React.createRef();\n  }\n\n  getSVGElement() {\n    return this.svgElement.current;\n  }\n\n  render() {\n    if (!(this.props.node.id !== undefined && this.props.node.type !== undefined\n      && this.props.node.textPadding !== undefined && this.props.node.topCenterX !== undefined\n      && this.props.node.topCenterY !== undefined && this.props.node.width !== undefined\n      && this.props.node.height !== undefined && this.props.node.color !== undefined\n      && this.props.node.names !== undefined && this.props.node.iconRadius !== undefined)\n      && this.props.node.textLineGap !== undefined && this.props.node.fontSize !== undefined) {\n      return null;\n    }\n    const nodeFadedClassModifier = this.props.isFaded\n      ? 'graph-node--faded' : '';\n    const nodeHalfFadedClassModifier = this.props.isHalfFaded\n      ? 'graph-node--half-faded' : '';\n    const nodeDashedClassModifier = this.props.isDashed\n      ? 'graph-node--dashed' : '';\n    const nodeClickableClassModifier = this.props.isClickable\n      ? 'graph-node--clickable' : 'graph-node--not-clickable';\n    const nodeIsCurrentHighlightingClassModifier = this.props.isHighlightingNode\n      ? 'graph-drawer__node--current-highlighting' : '';\n    const IconSVG = getCategoryIconSVG(this.props.node.type);\n    return (\n      <g\n        ref={this.svgElement}\n        key={this.props.node.id}\n        transform={`translate(${this.props.node.topCenterX}, ${this.props.node.topCenterY}) `}\n        className={`graph-node \n          ${nodeFadedClassModifier} \n          ${nodeHalfFadedClassModifier} \n          ${nodeDashedClassModifier} \n          ${nodeClickableClassModifier} \n          ${nodeIsCurrentHighlightingClassModifier}`}\n        onMouseOver={this.props.onMouseOver}\n        onMouseOut={this.props.onMouseOut}\n        onClick={this.props.onClick}\n        id={this.props.node.id}\n      >\n        <rect\n          className='graph-node__rect'\n          x={-this.props.node.width / 2}\n          y={0}\n          width={this.props.node.width}\n          height={this.props.node.height}\n          rx={4}\n          ry={4}\n          stroke={this.props.node.color}\n        />\n        {\n          getNodeTitleSVGFragment(\n            this.props.node.names,\n            this.props.matchedNodeNameIndices,\n            this.props.node.fontSize,\n            this.props.node.textPadding,\n            this.props.node.textLineGap,\n          )\n        }\n        {\n          <g\n            transform={`translate(${-this.props.node.iconRadius}, ${-this.props.node.iconRadius})`}\n          >\n            {\n              IconSVG ? <IconSVG /> : (\n                <circle\n                  cx={this.props.node.iconRadius}\n                  cy={this.props.node.iconRadius}\n                  r={this.props.node.iconRadius}\n                  fill={this.props.node.color}\n                />\n              )\n            }\n          </g>\n        }\n      </g>\n    );\n  }\n}\n\nconst GraphNodeShape = PropTypes.shape({\n  id: PropTypes.string,\n  type: PropTypes.string,\n  textPadding: PropTypes.number,\n  topCenterX: PropTypes.number,\n  topCenterY: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  color: PropTypes.string,\n  names: PropTypes.arrayOf(PropTypes.string),\n  iconRadius: PropTypes.number,\n  textLineGap: PropTypes.number,\n  fontSize: PropTypes.number,\n});\n\nGraphNode.propTypes = {\n  node: GraphNodeShape.isRequired,\n  isHighlightingNode: PropTypes.bool.isRequired,\n  isFaded: PropTypes.bool.isRequired,\n  isHalfFaded: PropTypes.bool.isRequired,\n  isDashed: PropTypes.bool.isRequired,\n  isClickable: PropTypes.bool.isRequired,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onClick: PropTypes.func,\n  matchedNodeNameIndices: MatchedIndicesShape,\n};\n\nGraphNode.defaultProps = {\n  onMouseOver: () => {},\n  onMouseOut: () => {},\n  onClick: () => {},\n  matchedNodeNameIndices: [],\n};\n\nexport default GraphNode;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './GraphEdge.css';\n\nclass GraphEdge extends React.Component {\n  render() {\n    const edgeRequiredClassModifier = this.props.edge.required ? 'graph-edge--required' : '';\n    const edgeFadedClassModifier = this.props.isFaded ? 'graph-edge--faded' : '';\n    const edgeHalfFadedClassModifier = this.props.isHalfFaded ? 'graph-edge--half-faded' : '';\n    const edgeHighlightedClassModifier = this.props.isHighlighted ? 'graph-edge--highlighted' : '';\n    return (\n      <path\n        className={`graph-edge \n          ${edgeRequiredClassModifier} \n          ${edgeFadedClassModifier} \n          ${edgeHalfFadedClassModifier} \n          ${edgeHighlightedClassModifier}`}\n        d={this.props.edge.pathString}\n      />\n    );\n  }\n}\n\nGraphEdge.propTypes = {\n  edge: PropTypes.object.isRequired,\n  isFaded: PropTypes.bool.isRequired,\n  isHalfFaded: PropTypes.bool.isRequired,\n  isHighlighted: PropTypes.bool.isRequired,\n};\n\nexport default GraphEdge;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GraphNode from '../GraphNode/GraphNode';\nimport GraphEdge from '../GraphEdge/GraphEdge';\nimport { SearchResultItemShape } from '../../utils';\nimport './GraphDrawer.css';\n\nclass GraphDrawer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphDomRef = React.createRef();\n    this.graphNodeRefs = [];\n    this.nodeSVGElementInitialized = false;\n  }\n\n  componentDidUpdate() {\n    // check if need update all node's svg elements\n    // this only happens once, at the first time graph is rendered\n    if (this.props.isGraphView\n       && this.props.layoutInitialized\n       && !this.nodeSVGElementInitialized) {\n      const graphNodesSVGElements = this.props.nodes.map(node => ({\n        nodeID: node.id,\n        svgElement: this.getNodeRef(node.id).current.getSVGElement(),\n      }))\n        .reduce((acc, cur) => {\n          acc[cur.nodeID] = cur.svgElement;\n          return acc;\n        }, {});\n      this.nodeSVGElementInitialized = true;\n      this.props.onGraphNodesSVGElementsUpdated(graphNodesSVGElements);\n    }\n  }\n\n  onMouseOverNode = (node) => {\n    this.props.onHoverNode(node.id);\n  }\n\n  onMouseOutNode = () => {\n    this.props.onCancelHoverNode();\n  }\n\n  onClickNode = (node) => {\n    this.props.onClickNode(node.id);\n  }\n\n  getNodeRef = (nodeID) => {\n    if (!this.graphNodeRefs[nodeID]) {\n      this.graphNodeRefs[nodeID] = React.createRef();\n    }\n    return this.graphNodeRefs[nodeID];\n  }\n\n  render() {\n    if (!this.props.layoutInitialized) return (<React.Fragment />);\n    const boundingBoxLength = this.props.graphBoundingBox[2][0];\n    const fittingScale = Math.min(\n      this.props.canvasWidth,\n      this.props.canvasHeight,\n    ) / boundingBoxLength;\n    const fittingTransX = Math.abs(\n      (boundingBoxLength - (this.props.canvasWidth / fittingScale)) / 2,\n    );\n    const fittingTransY = Math.abs(\n      (boundingBoxLength - (this.props.canvasHeight / fittingScale)) / 2,\n    );\n    if (isNaN(fittingTransX) || isNaN(fittingTransY) || isNaN(fittingScale)) return <g />;\n    return (\n      <g\n        className='graph-drawer'\n        transform={`scale(${fittingScale}) translate(${fittingTransX}, ${fittingTransY}) `}\n        ref={this.graphDomRef}\n      >\n        {\n          this.props.edges.map((edge, i) => {\n            let isEdgeFaded = false;\n            let isEdgeHalfFaded = false;\n            let isEdgeHighlighted = false;\n            if (this.props.isSearchMode) {\n              isEdgeFaded = true;\n            } else if (this.props.highlightingNode) {\n              const isEdgeRelatedToHighlightedNode =\n                this.props.relatedNodeIDs.includes(edge.source)\n                && this.props.relatedNodeIDs.includes(edge.target);\n              if (this.props.secondHighlightingNodeID) {\n                const isEdgeAlongPathRelatedToSecondHighlightNode =\n                  !!this.props.pathRelatedToSecondHighlightingNode\n                    .find(e => (e.source === edge.source && e.target === edge.target));\n                isEdgeHalfFaded = isEdgeRelatedToHighlightedNode\n                  && !isEdgeAlongPathRelatedToSecondHighlightNode;\n                isEdgeFaded = !isEdgeRelatedToHighlightedNode;\n                isEdgeHighlighted = isEdgeAlongPathRelatedToSecondHighlightNode;\n              } else {\n                isEdgeFaded = !isEdgeRelatedToHighlightedNode;\n                isEdgeHighlighted = isEdgeRelatedToHighlightedNode;\n              }\n            }\n            return (\n              <GraphEdge\n                key={`${edge.source}-${edge.target}-${i}`}\n                edge={edge}\n                isRequired={edge.required}\n                isFaded={isEdgeFaded}\n                isHalfFaded={isEdgeHalfFaded}\n                isHighlighted={isEdgeHighlighted}\n              />\n            );\n          })\n        }\n        {\n          this.props.nodes.map((node) => {\n            let isNodeFaded = false;\n            let isNodeClickable = true;\n            let isHighlightingNode = false;\n            let isNodeHalfFaded = false;\n            let isNodeDashed = false;\n            if (this.props.isSearchMode) {\n              isNodeFaded = !this.props.matchedNodeIDs.includes(node.id);\n              isNodeDashed = this.props.matchedNodeIDsInNameAndDescription.length > 0\n                && !isNodeFaded && !this.props.matchedNodeIDsInNameAndDescription.includes(node.id);\n              isNodeClickable = !isNodeFaded;\n            } else if (this.props.highlightingNode) {\n              isHighlightingNode = (this.props.highlightingNode.id === node.id);\n              isNodeClickable =\n                this.props.highlightingNode.id === node.id\n                || (this.props.secondHighlightingNodeCandidateIDs.length > 1\n                  && this.props.secondHighlightingNodeCandidateIDs.includes(node.id));\n\n              isNodeFaded = !this.props.relatedNodeIDs.includes(node.id);\n              if (this.props.secondHighlightingNodeID) {\n                isNodeHalfFaded = !isNodeFaded && !this.props.pathRelatedToSecondHighlightingNode\n                  .find(e => (e.source === node.id || e.target === node.id));\n              }\n            }\n            let matchedNodeNameIndices = [];\n            this.props.searchResult.forEach((item) => {\n              if (item.item.id === node.id) {\n                item.matches.forEach((matchItem) => {\n                  if (matchItem.key === 'title') {\n                    matchedNodeNameIndices = matchItem.indices;\n                  }\n                });\n              }\n            });\n            return (\n              <GraphNode\n                key={node.id}\n                node={node}\n                isHighlightingNode={isHighlightingNode}\n                isFaded={isNodeFaded}\n                isHalfFaded={isNodeHalfFaded}\n                isDashed={isNodeDashed}\n                isClickable={isNodeClickable}\n                onMouseOver={() => this.onMouseOverNode(node)}\n                onMouseOut={this.onMouseOutNode}\n                onClick={() => this.onClickNode(node)}\n                ref={this.getNodeRef(node.id)}\n                matchedNodeNameIndices={matchedNodeNameIndices}\n              />\n            );\n          })\n        }\n      </g>\n    );\n  }\n}\n\nGraphDrawer.propTypes = {\n  nodes: PropTypes.arrayOf(PropTypes.object),\n  edges: PropTypes.arrayOf(PropTypes.object),\n  graphBoundingBox: PropTypes.array,\n  layoutInitialized: PropTypes.bool,\n  canvasWidth: PropTypes.number,\n  canvasHeight: PropTypes.number,\n  onHoverNode: PropTypes.func,\n  onCancelHoverNode: PropTypes.func,\n  onClickNode: PropTypes.func,\n  highlightingNode: PropTypes.object,\n  relatedNodeIDs: PropTypes.array,\n  secondHighlightingNodeID: PropTypes.string,\n  secondHighlightingNodeCandidateIDs: PropTypes.arrayOf(PropTypes.string),\n  pathRelatedToSecondHighlightingNode: PropTypes.arrayOf(PropTypes.object),\n  isGraphView: PropTypes.bool,\n  isSearchMode: PropTypes.bool,\n  matchedNodeIDs: PropTypes.arrayOf(PropTypes.string),\n  matchedNodeIDsInNameAndDescription: PropTypes.arrayOf(PropTypes.string),\n  onGraphNodesSVGElementsUpdated: PropTypes.func,\n  searchResult: PropTypes.arrayOf(SearchResultItemShape),\n};\n\nGraphDrawer.defaultProps = {\n  nodes: [],\n  edges: [],\n  graphBoundingBox: [[0, 0], [0, 1], [1, 1], [1, 0]],\n  layoutInitialized: false,\n  canvasWidth: 1000,\n  canvasHeight: 1000,\n  onHoverNode: () => {},\n  onCancelHoverNode: () => {},\n  onClickNode: () => {},\n  highlightingNode: null,\n  relatedNodeIDs: [],\n  secondHighlightingNodeID: null,\n  secondHighlightingNodeCandidateIDs: [],\n  pathRelatedToSecondHighlightingNode: [],\n  isGraphView: true,\n  isSearchMode: false,\n  matchedNodeIDs: [],\n  matchedNodeIDsInNameAndDescription: [],\n  onGraphNodesSVGElementsUpdated: () => {},\n  searchResult: [],\n};\n\nexport default GraphDrawer;\n","import { connect } from 'react-redux';\nimport {\n  hoverNode,\n  clickNode,\n  setGraphNodesSVGElements,\n} from '../../action';\nimport GraphDrawer from './GraphDrawer';\n\nconst ReduxGraphDrawer = (() => {\n  const mapStateToProps = state => ({\n    nodes: state.ddgraph.nodes,\n    edges: state.ddgraph.edges,\n    graphBoundingBox: state.ddgraph.graphBoundingBox,\n    layoutInitialized: state.ddgraph.layoutInitialized,\n    highlightingNode: state.ddgraph.highlightingNode,\n    relatedNodeIDs: state.ddgraph.relatedNodeIDs,\n    secondHighlightingNodeCandidateIDs: state.ddgraph.secondHighlightingNodeCandidateIDs,\n    pathRelatedToSecondHighlightingNode: state.ddgraph.pathRelatedToSecondHighlightingNode,\n    secondHighlightingNodeID: state.ddgraph.secondHighlightingNodeID,\n    isGraphView: state.ddgraph.isGraphView,\n    matchedNodeIDs: state.ddgraph.matchedNodeIDs,\n    matchedNodeIDsInNameAndDescription: state.ddgraph.matchedNodeIDsInNameAndDescription,\n    searchResult: state.ddgraph.searchResult,\n    isSearchMode: state.ddgraph.isSearchMode,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onHoverNode: nodeID => dispatch(hoverNode(nodeID)),\n    onCancelHoverNode: () => dispatch(hoverNode(null)),\n    onClickNode: nodeID => dispatch(clickNode(nodeID)),\n    onGraphNodesSVGElementsUpdated: graphNodesSVGElements =>\n      dispatch(setGraphNodesSVGElements(graphNodesSVGElements)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(GraphDrawer);\n})();\n\nexport default ReduxGraphDrawer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './NodeTooltip.css';\n\nclass NodeTooltip extends React.Component {\n  render() {\n    if (!this.props.hoveringNode) return null;\n    const hoveringNodeSVGElement = this.props.graphNodesSVGElements\n      && this.props.graphNodesSVGElements[this.props.hoveringNode.id];\n    const svgBoundingBox = hoveringNodeSVGElement\n      ? hoveringNodeSVGElement.getBoundingClientRect() : { top: 0, left: 0, width: 0 };\n    const gap = 10;\n    const tooltipLeft = (svgBoundingBox.left - this.props.canvasBoundingRect.left)\n      + (svgBoundingBox.width / 2);\n    const tooltipBottom = (window.innerHeight - svgBoundingBox.top) + gap;\n    return (\n      <div\n        className='node-tooltip'\n        style={{\n          bottom: tooltipBottom,\n          left: tooltipLeft,\n        }}\n      >\n        {\n          this.props.hoveringNode && (\n            <div className='node-tooltip__wrapper'>\n              <span className='node-tooltip__text'>\n                {this.props.hoveringNode.label}\n              </span>\n              <span className='node-tooltip__arrow' />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nNodeTooltip.propTypes = {\n  hoveringNode: PropTypes.object,\n  canvasBoundingRect: PropTypes.object,\n  graphNodesSVGElements: PropTypes.object,\n};\n\nNodeTooltip.defaultProps = {\n  hoveringNode: null,\n  canvasBoundingRect: { top: 0, left: 0 },\n  graphNodesSVGElements: {},\n};\n\nexport default NodeTooltip;\n","import { connect } from 'react-redux';\nimport NodeTooltip from './NodeTooltip';\n\nconst ReduxNodeTooltip = (() => {\n  const mapStateToProps = state => ({\n    hoveringNode: state.ddgraph.hoveringNode,\n    canvasBoundingRect: state.ddgraph.canvasBoundingRect,\n    graphNodesSVGElements: state.ddgraph.graphNodesSVGElements,\n  });\n\n  return connect(mapStateToProps)(NodeTooltip);\n})();\n\nexport default ReduxNodeTooltip;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@gen3/ui-component/dist/components/Button';\nimport './NodePopup.css';\n\nclass NodePopup extends React.Component {\n  handleClickPropertyButton = () => {\n    this.props.onOpenOverlayPropertyTable();\n  }\n\n  render() {\n    if (!this.props.highlightingNode) {\n      return (\n        <React.Fragment />\n      );\n    }\n    const highlightingNodeSVGElement = this.props\n      .graphNodesSVGElements && this.props\n      .graphNodesSVGElements[this.props.highlightingNode.id];\n    const svgBoundingBox = highlightingNodeSVGElement\n      && highlightingNodeSVGElement.getBoundingClientRect\n      ? highlightingNodeSVGElement.getBoundingClientRect()\n      : { top: 0, left: 0, width: 0, bottom: 0 };\n    const popupLeft = (svgBoundingBox.left - this.props.canvasBoundingRect.left)\n      + (svgBoundingBox.width / 2);\n    const popupTop = svgBoundingBox.bottom - this.props.canvasBoundingRect.top;\n    return (\n      <div\n        className='node-popup'\n        style={{\n          top: popupTop,\n          left: popupLeft,\n        }}\n      >\n        {\n          this.props.highlightingNode && (\n            <div className='node-popup__wrapper'>\n              <div className='node-popup__content'>\n                <li className='node-popup__list-item'>{this.props.highlightingNode.requiredPropertiesCount} required properties</li>\n                <li className='node-popup__list-item'>{this.props.highlightingNode.optionalPropertiesCount} optional properties</li>\n                <Button\n                  className='node-popup__button'\n                  onClick={this.handleClickPropertyButton}\n                  label='Open properties'\n                  buttonType='secondary'\n                />\n              </div>\n              <span className='node-popup__arrow node-popup__arrow--outer' />\n              <span className='node-popup__arrow node-popup__arrow--inner' />\n              <i\n                className='node-popup__close g3-icon g3-icon--cross'\n                onClick={this.props.onClosePopup}\n                onKeyPress={this.props.onClosePopup}\n                role='button'\n                tabIndex={0}\n              />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nNodePopup.propTypes = {\n  highlightingNode: PropTypes.object,\n  graphNodesSVGElements: PropTypes.object,\n  onClosePopup: PropTypes.func,\n  canvasBoundingRect: PropTypes.object,\n  onOpenOverlayPropertyTable: PropTypes.func,\n};\n\nNodePopup.defaultProps = {\n  highlightingNode: null,\n  graphNodesSVGElements: null,\n  onClosePopup: () => {},\n  canvasBoundingRect: { top: 0, left: 0 },\n  onOpenOverlayPropertyTable: () => {},\n};\n\nexport default NodePopup;\n","import { connect } from 'react-redux';\nimport {\n  resetGraphHighlight,\n  setOverlayPropertyTableHidden,\n} from '../../action';\nimport NodePopup from './NodePopup';\n\nconst ReduxNodePopup = (() => {\n  const mapStateToProps = state => ({\n    highlightingNode: state.ddgraph.highlightingNode,\n    canvasBoundingRect: state.ddgraph.canvasBoundingRect,\n    graphNodesSVGElements: state.ddgraph.graphNodesSVGElements,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onClosePopup: () => dispatch(resetGraphHighlight()),\n    onOpenOverlayPropertyTable: () => dispatch(setOverlayPropertyTableHidden(false)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(NodePopup);\n})();\n\nexport default ReduxNodePopup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@gen3/ui-component/dist/components/Button';\nimport { downloadTemplate, SearchResultItemShape } from '../../utils';\nimport { getCategoryIconSVG } from '../../NodeCategories/helper';\nimport {\n  getNodeDescriptionFragment,\n  getNodeTitleFragment,\n} from '../../highlightHelper';\nimport DataDictionaryPropertyTable from '../../table/DataDictionaryPropertyTable/.';\nimport './OverlayPropertyTable.css';\n\nclass OverlayPropertyTable extends React.Component {\n  getTitle = () => {\n    if (this.props.isSearchMode) {\n      const nodeTitleFragment = getNodeTitleFragment(\n        this.props.matchedResult.matches,\n        this.props.node.title,\n        'overlay-property-table__span',\n      );\n      return nodeTitleFragment;\n    }\n\n    return this.props.node.title;\n  };\n\n  getDescription = () => {\n    if (this.props.isSearchMode) {\n      const nodeDescriptionFragment = getNodeDescriptionFragment(\n        this.props.matchedResult.matches,\n        this.props.node.description,\n        'overlay-property-table__span',\n      );\n      return nodeDescriptionFragment;\n    }\n\n    return this.props.node.description;\n  };\n\n  /**\n   * Close the whole overlay property table\n   */\n  handleClose = () => {\n    this.props.onCloseOverlayPropertyTable();\n  };\n\n  /**\n   * Toggle the property tabl to display all properties\n   */\n  handleOpenAllProperties = () => {\n    this.props.onOpenMatchedProperties();\n  };\n\n  /**\n   * Toggle the property table to display matched properties only\n   */\n  handleDisplayOnlyMatchedProperties = () => {\n    this.props.onCloseMatchedProperties();\n  };\n\n  render() {\n    if (!this.props.node || this.props.hidden) return (<React.Fragment />);\n    const IconSVG = getCategoryIconSVG(this.props.node.category);\n    const searchedNodeNotOpened = this.props.isSearchMode && !this.props.isSearchResultNodeOpened;\n    const needHighlightSearchResult = this.props.isSearchMode;\n    return (\n      <div className='overlay-property-table'>\n        <div className='overlay-property-table__background' />\n        <div className='overlay-property-table__fixed-container'>\n          <div className='overlay-property-table__content'>\n            <div className='overlay-property-table__header'>\n              <div className='overlay-property-table__category'>\n                <IconSVG className='overlay-property-table__category-icon' />\n                <h4 className='overlay-property-table__category-text'>{this.props.node.category}</h4>\n                {\n                  this.props.isSearchMode && (\n                    <Button\n                      className='overlay-property-table__toggle-node'\n                      onClick={searchedNodeNotOpened\n                        ? this.handleOpenAllProperties : this.handleDisplayOnlyMatchedProperties}\n                      label={searchedNodeNotOpened ? 'See All' : 'See Only Matched'}\n                      buttonType='secondary'\n                    />\n                  )\n                }\n                <span\n                  className='overlay-property-table__close'\n                  onClick={this.handleClose}\n                  onKeyPress={this.handleClose}\n                  role='button'\n                  tabIndex={0}\n                >\n                  Close\n                  <i className='overlay-property-table__close-icon g3-icon g3-icon--cross g3-icon--sm' />\n                </span>\n                <Button\n                  className='overlay-property-table__download-button'\n                  onClick={() => { downloadTemplate('tsv', this.props.node.id); }}\n                  label='TSV'\n                  buttonType='secondary'\n                  rightIcon='download'\n                />\n                <Button\n                  className='overlay-property-table__download-button'\n                  onClick={() => { downloadTemplate('json', this.props.node.id); }}\n                  label='JSON'\n                  buttonType='secondary'\n                  rightIcon='download'\n                />\n              </div>\n              <div className='overlay-property-table__node'>\n                <h3 className='overlay-property-table__node-title'>\n                  {this.getTitle()}\n                </h3>\n                <div className='overlay-property-table__node-description introduction'>\n                  {this.getDescription()}\n                </div>\n              </div>\n            </div>\n            <div className='overlay-property-table__property'>\n              <DataDictionaryPropertyTable\n                properties={this.props.node.properties}\n                requiredProperties={this.props.node.required}\n                hasBorder={false}\n                onlyShowMatchedProperties={searchedNodeNotOpened}\n                needHighlightSearchResult={needHighlightSearchResult}\n                hideIsRequired={searchedNodeNotOpened}\n                matchedResult={this.props.matchedResult}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nOverlayPropertyTable.propTypes = {\n  hidden: PropTypes.bool,\n  node: PropTypes.object,\n  onCloseOverlayPropertyTable: PropTypes.func,\n  isSearchMode: PropTypes.bool,\n  matchedResult: SearchResultItemShape,\n  onOpenMatchedProperties: PropTypes.func,\n  onCloseMatchedProperties: PropTypes.func,\n  isSearchResultNodeOpened: PropTypes.bool,\n};\n\nOverlayPropertyTable.defaultProps = {\n  hidden: true,\n  node: null,\n  onCloseOverlayPropertyTable: () => {},\n  isSearchMode: false,\n  matchedResult: {},\n  onOpenMatchedProperties: () => {},\n  onCloseMatchedProperties: () => {},\n  isSearchResultNodeOpened: false,\n};\n\nexport default OverlayPropertyTable;\n","import { connect } from 'react-redux';\nimport {\n  setOverlayPropertyTableHidden,\n  setHighlightingMatchedNodeOpened,\n} from '../../action';\nimport OverlayPropertyTable from './OverlayPropertyTable';\n\nconst getNode = (state) => {\n  if (state.ddgraph.isSearchMode) {\n    if (state.ddgraph.highlightingMatchedNodeID) {\n      return state.submission.dictionary[state.ddgraph.highlightingMatchedNodeID];\n    }\n\n    return null;\n  }\n  if (state.ddgraph.highlightingNode) {\n    return state.submission.dictionary[state.ddgraph.highlightingNode.id];\n  }\n  return null;\n};\n\nconst getSearchResultItem = (state) => {\n  if (state.ddgraph.isSearchMode) {\n    return state.ddgraph.searchResult\n      .find(resItem => resItem.item.id === state.ddgraph.highlightingMatchedNodeID);\n  }\n  return null;\n};\n\nconst ReduxOverlayPropertyTable = (() => {\n  const mapStateToProps = state => ({\n    hidden: state.ddgraph.overlayPropertyHidden,\n    node: getNode(state),\n    isSearchMode: state.ddgraph.isSearchMode,\n    matchedResult: getSearchResultItem(state),\n    isSearchResultNodeOpened: state.ddgraph.highlightingMatchedNodeOpened,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onCloseOverlayPropertyTable: () => dispatch(setOverlayPropertyTableHidden(true)),\n    onOpenMatchedProperties: () => dispatch(setHighlightingMatchedNodeOpened(true)),\n    onCloseMatchedProperties: () => dispatch(setHighlightingMatchedNodeOpened(false)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(OverlayPropertyTable);\n})();\n\nexport default ReduxOverlayPropertyTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@gen3/ui-component/dist/components/Button';\nimport './ActionLayer.css';\n\n/**\n* A layer over the graph.\n* Put action buttons here.\n*/\nclass ActionLayer extends React.Component {\n  handleClearSearch = () => {\n    this.props.onClearSearchResult();\n  }\n\n  render() {\n    return (\n      <div className='action-layer'>\n        {\n          this.props.isSearchMode && (\n            <Button\n              className='action-layer__clear-search'\n              onClick={this.handleClearSearch}\n              label='Clear Search Result'\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nActionLayer.propTypes = {\n  isSearchMode: PropTypes.bool,\n  onClearSearchResult: PropTypes.func,\n};\n\nActionLayer.defaultProps = {\n  isSearchMode: false,\n  onClearSearchResult: () => {},\n};\n\nexport default ActionLayer;\n","import { connect } from 'react-redux';\nimport ActionLayer from './ActionLayer';\n\nconst ReduxActionLayer = (() => {\n  const mapStateToProps = state => ({\n    isSearchMode: state.ddgraph.isSearchMode,\n  });\n\n  return connect(mapStateToProps)(ActionLayer);\n})();\n\nexport default ReduxActionLayer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReduxGraphCalculator from '../GraphCalculator/.';\nimport ReduxLegend from '../Legend/.';\nimport ReduxCanvas from '../Canvas/.';\nimport ReduxGraphDrawer from '../GraphDrawer/.';\nimport ReduxNodeTooltip from '../NodeTooltip/.';\nimport ReduxNodePopup from '../NodePopup/.';\nimport ReduxOverlayPropertyTable from '../OverlayPropertyTable/.';\nimport ReduxActionLayer from '../ActionLayer/.';\n\nclass DataDictionaryGraph extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ReduxGraphCalculator />\n        <ReduxLegend />\n        <ReduxCanvas>\n          <ReduxGraphDrawer />\n        </ReduxCanvas>\n        <ReduxNodeTooltip />\n        <ReduxNodePopup />\n        <ReduxOverlayPropertyTable />\n        <ReduxActionLayer onClearSearchResult={this.props.onClearSearchResult} />\n      </React.Fragment>\n    );\n  }\n}\n\nDataDictionaryGraph.propTypes = {\n  onClearSearchResult: PropTypes.func,\n};\n\nDataDictionaryGraph.defaultProps = {\n  onClearSearchResult: () => {},\n};\n\nexport default DataDictionaryGraph;\n","import Fuse from 'fuse.js';\nimport {\n  parseDictionaryNodes,\n  getPropertyDescription,\n  getType,\n} from '../../utils';\n\nexport const ZERO_RESULT_FOUND_MSG = '0 results found. Please try another keyword.';\n\n/**\n * Prepare search items for Fuse.io library\n * @params [Object] dictionary\n * @returns [Object] search data\n */\nexport const prepareSearchData = (dictionary) => {\n  const searchData = parseDictionaryNodes(dictionary)\n    .map((node) => {\n      const properties = Object.keys(node.properties).map((propertyKey) => {\n        let type = getType(node.properties[propertyKey]);\n        if (type === 'UNDEFINED') type = undefined;\n        const propertyDescription = getPropertyDescription(node.properties[propertyKey]);\n        return {\n          name: propertyKey,\n          description: propertyDescription,\n          type,\n        };\n      });\n      return {\n        id: node.id,\n        title: node.title,\n        description: node.description,\n        properties,\n      };\n    });\n  return searchData;\n};\n\nexport const ERR_KEYWORD_TOO_SHORT = 'Keyword too short, try longer keyword.';\nexport const ERR_KEYWORD_TOO_LONG = 'Keyword too long (more than 32).';\n\n/**\n * Call Fuse search and returns search result\n * @params [Object] searchData - see prepareSearchData returns\n * @params [string] keyword\n * @returns [SearchResultItemShape[]] (see ../../utils).\n */\nexport const searchKeyword = (searchData, keyword) => {\n  if (!keyword || keyword.length < 2) {\n    return {\n      result: [],\n      errorMsg: ERR_KEYWORD_TOO_SHORT,\n    };\n  }\n  // 32 is length limitation of Fuse search library\n  if (keyword.length > 32) {\n    return {\n      result: [],\n      errorMsg: ERR_KEYWORD_TOO_LONG,\n    };\n  }\n  const halfLength = Math.round(keyword.length / 2);\n  const minMatchCharLength = Math.min(Math.max(halfLength, 10), keyword.length);\n  const options = {\n    keys: [\n      'title',\n      'description',\n      'properties.name',\n      'properties.description',\n      'properties.type',\n    ],\n    includeMatches: true,\n    threshold: 0.3,\n    shouldSort: true,\n    includeScore: true,\n    minMatchCharLength,\n  };\n  const handler = new Fuse(searchData, options);\n  const result = handler.search(keyword)\n    .map((resItem) => {\n      // A bug in Fuse sometimes returns wrong indices that end < start\n      const matches = resItem.matches\n        .filter(matchItem => matchItem.indices[0][1] >= matchItem.indices[0][0]);\n      return {\n        ...resItem,\n        matches,\n      };\n    })\n    .map((resItem) => {\n      // filter out matches that is too shorter than keyword\n      const matches = resItem.matches\n        .filter((matchItem) => {\n          const matchLen = (matchItem.indices[0][1] - matchItem.indices[0][0]) + 1;\n          return matchLen >= halfLength;\n        });\n      return {\n        ...resItem,\n        matches,\n      };\n    })\n    .filter(resItem => resItem.matches.length > 0);\n  const errorMsg = (result && result.length > 0) ? '' : ZERO_RESULT_FOUND_MSG;\n  return {\n    result,\n    errorMsg,\n  };\n};\n\n/**\n * Prepare search items for Fuse.io library, call Fuse constructor\n * and return a search instance handler.\n * @params [SearchResultItemShape[]] search result (SearchResultItemShape from '../../utils')\n * @returns [Object] summary\n */\nexport const getSearchSummary = (result) => {\n  const matchedNodeIDsInNameAndDescription = [];\n  const matchedNodeIDsInProperties = [];\n  const generalMatchedNodeIDs = [];\n  let matchedPropertiesCount = 0;\n  let matchedNodeNameAndDescriptionsCount = 0;\n  result.forEach((resItem) => {\n    const nodeID = resItem.item.id;\n    resItem.matches.forEach((matchedItem) => {\n      switch (matchedItem.key) {\n      case 'properties.type':\n      case 'properties.name':\n      case 'properties.description':\n        matchedPropertiesCount += 1;\n        if (!matchedNodeIDsInProperties.includes(nodeID)) {\n          matchedNodeIDsInProperties.push(nodeID);\n        }\n        if (!generalMatchedNodeIDs.includes(nodeID)) {\n          generalMatchedNodeIDs.push(nodeID);\n        }\n        break;\n      case 'title':\n      case 'description':\n        matchedNodeNameAndDescriptionsCount += 1;\n        if (!matchedNodeIDsInNameAndDescription.includes(nodeID)) {\n          matchedNodeIDsInNameAndDescription.push(nodeID);\n        }\n        if (!generalMatchedNodeIDs.includes(nodeID)) {\n          generalMatchedNodeIDs.push(nodeID);\n        }\n        break;\n      default:\n        break;\n      }\n    });\n  });\n  return {\n    matchedPropertiesCount,\n    matchedNodeNameAndDescriptionsCount,\n    matchedNodeIDsInNameAndDescription,\n    matchedNodeIDsInProperties,\n    generalMatchedNodeIDs,\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AutoComplete from '@gen3/ui-component/dist/components/AutoComplete';\nimport { compareTwoStrings } from 'string-similarity';\nimport { prepareSearchData, searchKeyword, getSearchSummary, ZERO_RESULT_FOUND_MSG } from './searchHelper';\nimport './DictionarySearcher.css';\n\nclass DictionarySearcher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.searchData = prepareSearchData(props.dictionary);\n    this.autoCompleteRef = React.createRef();\n    this.state = {\n      suggestionList: [],\n      isSearchFinished: false,\n      searchResult: {\n        matchedNodes: [],\n        summary: {},\n      },\n      hasError: false,\n      errorMsg: '',\n    };\n  }\n\n  componentDidMount() {\n    // resume search status after switching back from other pages\n    if (this.props.currentSearchKeyword) {\n      this.autoCompleteRef.current.setInputText(this.props.currentSearchKeyword);\n      this.search(this.props.currentSearchKeyword);\n    }\n  }\n\n  onClearResult = () => {\n    this.resetSearchResult();\n    this.autoCompleteRef.current.clearInput();\n  };\n\n  launchClearSearchFromOutside = () => {\n    this.onClearResult();\n  };\n\n  launchSearchFromOutside = (keyword) => {\n    this.autoCompleteRef.current.setInputText(keyword);\n    this.search(keyword);\n  }\n\n  search = (str) => {\n    this.props.setIsSearching(true);\n    const { result, errorMsg } = searchKeyword(this.searchData, str);\n    if (!result || result.length === 0) {\n      this.props.setIsSearching(false);\n      this.props.onSearchResultUpdated([], []);\n      this.setState({\n        isSearchFinished: true,\n        hasError: true,\n        errorMsg,\n        suggestionList: [],\n      });\n      return;\n    }\n    const summary = getSearchSummary(result);\n    this.setState({\n      isSearchFinished: true,\n      hasError: false,\n      searchResult: {\n        matchedNodes: result,\n        summary,\n      },\n      suggestionList: [],\n    });\n    this.props.setIsSearching(false);\n    this.props.onSearchResultUpdated(result, summary);\n    this.props.onSearchHistoryItemCreated({\n      keywordStr: str,\n      matchedCount: summary.generalMatchedNodeIDs.length,\n    });\n    this.props.onSaveCurrentSearchKeyword(str);\n  };\n\n  resetSearchResult = () => {\n    this.setState({\n      isSearchFinished: false,\n      searchResult: {\n        matchedNodes: [],\n        summary: {},\n      },\n    });\n    this.props.onSearchResultCleared();\n  };\n\n  inputChangeFunc = (inputText) => {\n    this.props.onStartSearching();\n    this.resetSearchResult();\n    const { result } = searchKeyword(this.searchData, inputText);\n    const matchedStrings = {};\n    result.forEach((resItem) => {\n      resItem.matches.forEach((matchItem) => {\n        if (!matchedStrings[matchItem.value]) {\n          matchedStrings[matchItem.value] = {\n            matchedPieceIndices: matchItem.indices.map(arr => ([arr[0], arr[1] + 1])),\n          };\n        }\n      });\n    });\n    const suggestionList = Object.keys(matchedStrings)\n      .sort((str1, str2) => compareTwoStrings(str2, inputText) - compareTwoStrings(str1, inputText))\n      .map(str => ({\n        fullString: str,\n        matchedPieceIndices: matchedStrings[str].matchedPieceIndices,\n      }));\n    this.setState({\n      suggestionList,\n    });\n  };\n\n  suggestionItemClickFunc = (suggestionItem) => {\n    this.autoCompleteRef.current.setInputText(suggestionItem.fullString);\n    this.search(suggestionItem.fullString);\n  };\n\n  submitInputFunc = (inputText) => {\n    this.search(inputText);\n  };\n\n  render() {\n    return (\n      <div className='data-dictionary-searcher'>\n        <AutoComplete\n          ref={this.autoCompleteRef}\n          suggestionList={this.state.suggestionList}\n          inputPlaceHolderText='Search in Dictionary'\n          onSuggestionItemClick={this.suggestionItemClickFunc}\n          onInputChange={this.inputChangeFunc}\n          onSubmitInput={this.submitInputFunc}\n        />\n        {\n          this.state.isSearchFinished && (\n            <React.Fragment>\n              {\n                !this.state.hasError && (\n                  this.state.searchResult.matchedNodes.length > 0 ? (\n                    <React.Fragment>\n                      <div className='dictionary-searcher__result'>\n                        <h4 className='dictionary-searcher__result-text'>Search Results</h4>\n                        <span\n                          className='dictionary-searcher__result-clear body'\n                          onClick={this.onClearResult}\n                          role='button'\n                          tabIndex={0}\n                          onKeyPress={this.onClearResult}\n                        >Clear Result</span>\n                      </div>\n                      <li className='dictionary-searcher__result-item body'>\n                        <span className='dictionary-searcher__result-count'>\n                          {this.state.searchResult.summary.matchedNodeNameAndDescriptionsCount}\n                        </span> matches in nodes (title and description)\n                      </li>\n                      <li className='dictionary-searcher__result-item body'>\n                        <span className='dictionary-searcher__result-count'>\n                          {this.state.searchResult.summary.matchedPropertiesCount}\n                        </span> matches in node properties\n                      </li>\n                    </React.Fragment>\n                  ) : (\n                    <p>{ZERO_RESULT_FOUND_MSG}</p>\n                  )\n                )\n              }\n              {\n                this.state.hasError && (\n                  <p>{this.state.errorMsg}</p>\n                )\n              }\n            </React.Fragment>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nDictionarySearcher.propTypes = {\n  dictionary: PropTypes.object.isRequired,\n  setIsSearching: PropTypes.func,\n  onSearchResultUpdated: PropTypes.func,\n  onSearchHistoryItemCreated: PropTypes.func,\n  onSearchResultCleared: PropTypes.func,\n  onSaveCurrentSearchKeyword: PropTypes.func,\n  currentSearchKeyword: PropTypes.string,\n  onStartSearching: PropTypes.func,\n};\n\nDictionarySearcher.defaultProps = {\n  setIsSearching: () => {},\n  onSearchResultUpdated: () => {},\n  onSearchHistoryItemCreated: () => {},\n  onSearchResultCleared: () => {},\n  onSaveCurrentSearchKeyword: () => {},\n  currentSearchKeyword: '',\n  onStartSearching: () => {},\n};\n\nexport default DictionarySearcher;\n","import { connect } from 'react-redux';\nimport {\n  setIsSearching,\n  setSearchResult,\n  addSearchHistoryItem,\n  clearSearchResult,\n  saveCurrentSearchKeyword,\n  resetGraphHighlight,\n} from '../../action';\nimport DictionarySearcher from './DictionarySearcher';\n\nconst ReduxDictionarySearcher = (() => {\n  const mapStateToProps = state => ({\n    dictionary: state.submission.dictionary,\n    currentSearchKeyword: state.ddgraph.currentSearchKeyword,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    setIsSearching: isSearching => dispatch(setIsSearching(isSearching)),\n    onSearchResultUpdated: (result, summary) => dispatch(setSearchResult(result, summary)),\n    onSearchHistoryItemCreated: searchHistoryItem =>\n      dispatch(addSearchHistoryItem(searchHistoryItem)),\n    onSearchResultCleared: () => dispatch(clearSearchResult()),\n    onSaveCurrentSearchKeyword: keyword => dispatch(saveCurrentSearchKeyword(keyword)),\n    onStartSearching: () => dispatch(resetGraphHighlight()),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps, null, { withRef: true })(DictionarySearcher);\n})();\n\nexport default ReduxDictionarySearcher;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './DictionarySearchHistory.css';\n\nclass DictionarySearchHistory extends React.Component {\n  handleClick = (keyword) => {\n    this.props.onClickSearchHistoryItem(keyword);\n  }\n\n  handleClearHistory = () => {\n    this.props.onClearSearchHistoryItems();\n  }\n\n  render() {\n    if (this.props.searchHistoryItems && this.props.searchHistoryItems.length > 0) {\n      return (\n        <div className='dictionary-search-history'>\n          <div className='dictionary-search-history__title'>\n            <h4 className='dictionary-search-history__title-text'>\n              Last Search\n            </h4>\n            <span\n              className='dictionary-search-history__clear'\n              onClick={this.handleClearHistory}\n              role='button'\n              onKeyPress={this.handleClearHistory}\n              tabIndex={0}\n            >\n              Clear History\n            </span>\n          </div>\n          <div>\n            {\n              this.props.searchHistoryItems && this.props.searchHistoryItems.map((item) => {\n                const zeroCountModifier = item.matchedCount === 0 ? 'dictionary-search-history__item-badge--zero' : '';\n                return (\n                  <div\n                    className='dictionary-search-history__item'\n                    key={item.keywordStr}\n                    onClick={() => this.handleClick(item.keywordStr)}\n                    role='button'\n                    onKeyPress={() => this.handleClick(item.keywordStr)}\n                    tabIndex={0}\n                  >\n                    <span className='dictionary-search-history__item-keyword'>{item.keywordStr}</span>\n                    <span className={`dictionary-search-history__item-badge ${zeroCountModifier}`}>{item.matchedCount}</span>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nconst SearchHistoryItemShape = PropTypes.shape({\n  keywordStr: PropTypes.string,\n  matchedCount: PropTypes.number,\n});\n\nDictionarySearchHistory.propTypes = {\n  searchHistoryItems: PropTypes.arrayOf(SearchHistoryItemShape),\n  onClickSearchHistoryItem: PropTypes.func,\n  onClearSearchHistoryItems: PropTypes.func,\n};\n\nDictionarySearchHistory.defaultProps = {\n  searchHistoryItems: [],\n  onClickSearchHistoryItem: () => {},\n  onClearSearchHistoryItems: () => {},\n};\n\nexport default DictionarySearchHistory;\n","import { connect } from 'react-redux';\nimport { clearSearchHistoryItems } from '../../action';\nimport DictionarySearchHistory from './DictionarySearchHistory';\n\nconst ReduxDictionarySearchHistory = (() => {\n  const mapStateToProps = state => ({\n    searchHistoryItems: state.ddgraph.searchHistoryItems,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onClearSearchHistoryItems: () => dispatch(clearSearchHistoryItems()),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(DictionarySearchHistory);\n})();\n\nexport default ReduxDictionarySearchHistory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReduxDataDictionaryTable from './table/DataDictionaryTable';\nimport ReduxDataModelStructure from './DataModelStructure';\nimport DataDictionaryGraph from './graph/DataDictionaryGraph/.';\nimport ReduxDictionarySearcher from './search/DictionarySearcher/.';\nimport ReduxDictionarySearchHistory from './search/DictionarySearchHistory/.';\nimport './DataDictionary.css';\n\nclass DataDictionary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dictionarySearcherRef = React.createRef();\n  }\n\n  setGraphView = (isGraphView) => {\n    this.props.onSetGraphView(isGraphView);\n  };\n\n  handleClickSearchHistoryItem = (keyword) => {\n    this.dictionarySearcherRef.current.getWrappedInstance().launchSearchFromOutside(keyword);\n  };\n\n  handleClearSearchResult = () => {\n    this.dictionarySearcherRef.current.getWrappedInstance().launchClearSearchFromOutside();\n  };\n\n  render() {\n    return (\n      <div className='data-dictionary'>\n        <div className='data-dictionary__sidebar'>\n          <div className='data-dictionary__switch'>\n            <span\n              className={`data-dictionary__switch-button ${!this.props.isGraphView ? '' : 'data-dictionary__switch-button--active'}`}\n              onClick={() => { this.setGraphView(true); }}\n              onKeyPress={() => { this.setGraphView(true); }}\n              role='button'\n              tabIndex={0}\n            >\n              Graph View\n            </span>\n            <span\n              className={`data-dictionary__switch-button ${this.props.isGraphView ? '' : 'data-dictionary__switch-button--active'}`}\n              onClick={() => { this.setGraphView(false); }}\n              onKeyPress={() => { this.setGraphView(true); }}\n              role='button'\n              tabIndex={0}\n            >\n              Table View\n            </span>\n          </div>\n          <ReduxDictionarySearcher ref={this.dictionarySearcherRef} />\n          <ReduxDataModelStructure />\n          <ReduxDictionarySearchHistory\n            onClickSearchHistoryItem={this.handleClickSearchHistoryItem}\n          />\n          <div className='data-dictionary__search-history' />\n        </div>\n        <div\n          className='data-dictionary__main'\n        >\n          { this.props.isGraphView\n            ? (\n              <div className={`data-dictionary__graph ${this.props.isGraphView ? '' : 'data-dictionary__graph--hidden'}`}>\n                <DataDictionaryGraph\n                  onClearSearchResult={this.handleClearSearchResult}\n                />\n              </div>\n            )\n            : (\n              <div className={`data-dictionary__table ${!this.props.isGraphView ? '' : 'data-dictionary__table--hidden'}`}>\n                <ReduxDataDictionaryTable />\n              </div>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nDataDictionary.propTypes = {\n  onSetGraphView: PropTypes.func,\n  isGraphView: PropTypes.bool,\n};\n\nDataDictionary.defaultProps = {\n  onSetGraphView: () => {},\n  isGraphView: false,\n};\n\n\nexport default DataDictionary;\n","import { connect } from 'react-redux';\nimport { setGraphView } from './action.js';\nimport DataDictionary from './DataDictionary';\n\nconst ReduxDataDictionary = (() => {\n  const mapStateToProps = state => ({\n    isGraphView: state.ddgraph.isGraphView,\n  });\n\n  const mapDispatchToProps = dispatch => ({\n    onSetGraphView: isGraphView => dispatch(setGraphView(isGraphView)),\n  });\n\n  return connect(mapStateToProps, mapDispatchToProps)(DataDictionary);\n})();\n\nexport default ReduxDataDictionary;\n","import {\n  getSearchHistoryItems,\n  clearSearchHistoryItems,\n  addSearchHistoryItems,\n} from './utils';\n\nconst ddgraphInitialState = {\n  isGraphView: true,\n  layoutInitialized: false,\n  nodes: [],\n  edges: [],\n  graphBoundingBox: [],\n  legendItems: [],\n  hoveringNode: null,\n  highlightingNode: null,\n  relatedNodeIDs: [],\n  secondHighlightingNodeID: null,\n  dataModelStructure: null,\n  overlayPropertyHidden: true,\n  canvasBoundingRect: { top: 0, left: 0 },\n  needReset: false,\n  tableExpandNodeID: null,\n  searchHistoryItems: getSearchHistoryItems(),\n  graphNodesSVGElements: null,\n  currentSearchKeyword: '',\n  searchResult: [],\n  matchedNodeIDs: [],\n  matchedNodeIDsInProperties: [],\n  matchedNodeIDsInNameAndDescription: [],\n  isSearchMode: false,\n  isSearching: false,\n  highlightingMatchedNodeID: null,\n  highlightingMatchedNodeOpened: false,\n};\n\nconst ddgraph = (state = ddgraphInitialState, action) => {\n  switch (action.type) {\n  case 'TOGGLE_GRAPH_TABLE_VIEW': {\n    return {\n      ...state,\n      isGraphView: action.isGraphView,\n      overlayPropertyHidden: true,\n    };\n  }\n  case 'GRAPH_LAYOUT_CALCULATED': {\n    return {\n      ...state,\n      nodes: action.nodes,\n      edges: action.edges,\n      graphBoundingBox: action.graphBoundingBox,\n      layoutInitialized: true,\n    };\n  }\n  case 'GRAPH_LEGEND_CALCULATED': {\n    return {\n      ...state,\n      legendItems: action.legendItems,\n    };\n  }\n  case 'GRAPH_UPDATE_HOVERING_NODE': {\n    const newHoveringNode = state.nodes.find(n => n.id === action.nodeID);\n    return {\n      ...state,\n      hoveringNode: newHoveringNode,\n    };\n  }\n  case 'GRAPH_UPDATE_CANVAS_BOUNDING_RECT': {\n    return {\n      ...state,\n      canvasBoundingRect: action.canvasBoundingRect,\n    };\n  }\n  case 'GRAPH_UPDATE_RELATED_HIGHLIGHTING_NODE': {\n    return {\n      ...state,\n      relatedNodeIDs: action.relatedNodeIDs,\n    };\n  }\n  case 'GRAPH_UPDATE_SECOND_HIGHLIGHTING_NODE_CANDIDATES': {\n    return {\n      ...state,\n      secondHighlightingNodeCandidateIDs: action.secondHighlightingNodeCandidateIDs,\n    };\n  }\n  case 'GRAPH_UPDATE_PATH_RELATED_TO_SECOND_HIGHLIGHTING_NODE': {\n    return {\n      ...state,\n      pathRelatedToSecondHighlightingNode: action.pathRelatedToSecondHighlightingNode,\n    };\n  }\n  case 'GRAPH_UPDATE_DATA_MODEL_STRUCTURE': {\n    return {\n      ...state,\n      dataModelStructure: action.dataModelStructure,\n      dataModelStructureRelatedNodeIDs: action.dataModelStructureRelatedNodeIDs,\n      dataModelStructureAllRoutesBetween: action.routesBetweenStartEndNodes,\n    };\n  }\n  case 'GRAPH_SET_OVERLAY_PROPERTY_TABLE_HIDDEN': {\n    return {\n      ...state,\n      overlayPropertyHidden: action.isHidden,\n    };\n  }\n  case 'GRAPH_CANVAS_RESET_REQUIRED': {\n    return {\n      ...state,\n      needReset: action.needReset,\n    };\n  }\n  case 'GRAPH_RESET_HIGHLIGHT': {\n    return {\n      ...state,\n      highlightingNode: null,\n      secondHighlightingNodeID: null,\n      tableExpandNodeID: null,\n    };\n  }\n  case 'GRAPH_CLICK_NODE': {\n    if (state.isSearchMode) {\n      // clicking node in search mode opens property table\n      return {\n        ...state,\n        highlightingMatchedNodeID: action.nodeID,\n        highlightingMatchedNodeOpened: false,\n        overlayPropertyHidden: false,\n      };\n    }\n    let newHighlightingNode = null;\n    let newSecondHighlightingNodeID = null;\n    if (action.nodeID) {\n      // if no node is selected, select this node as highlight node\n      if (!state.highlightingNode) {\n        newHighlightingNode = state.nodes.find(n => n.id === action.nodeID);\n      } else if (state.highlightingNode) {\n        newHighlightingNode = state.highlightingNode;\n\n        // if is clicking the same node\n        if (state.highlightingNode.id === action.nodeID) {\n          // if no second node is selected, regard this as cancel selecting\n          if (!state.secondHighlightingNodeID) {\n            newHighlightingNode = null;\n          }\n        } else if (state.secondHighlightingNodeCandidateIDs.length > 1\n          && state.secondHighlightingNodeCandidateIDs.includes(action.nodeID)) {\n          // regard as canceling selecting second highlight node\n          if (state.secondHighlightingNodeID === action.nodeID) {\n            newSecondHighlightingNodeID = null;\n          } else { // select this as second highlight node\n            newSecondHighlightingNodeID = action.nodeID;\n          }\n        }\n      }\n    }\n    const newTableExpandNodeID = newHighlightingNode ? newHighlightingNode.id : null;\n    return {\n      ...state,\n      highlightingNode: newHighlightingNode,\n      secondHighlightingNodeID: newSecondHighlightingNodeID,\n      tableExpandNodeID: newTableExpandNodeID,\n    };\n  }\n  case 'GRAPH_CLICK_BLANK_SPACE': {\n    let newHighlightingNode = state.highlightingNode;\n    let newSecondHighlightingNodeID = state.secondHighlightingNodeID;\n    let newTableExpandNodeID = state.tableExpandNodeID;\n    if (state.highlightingNode) {\n      if (state.secondHighlightingNodeID) {\n        newSecondHighlightingNodeID = null;\n      } else {\n        newHighlightingNode = null;\n        newTableExpandNodeID = null;\n      }\n    }\n    return {\n      ...state,\n      highlightingNode: newHighlightingNode,\n      secondHighlightingNodeID: newSecondHighlightingNodeID,\n      tableExpandNodeID: newTableExpandNodeID,\n    };\n  }\n  case 'TABLE_EXPAND_NODE': {\n    let newHighlightingNode = null;\n    if (action.nodeID) {\n      newHighlightingNode = state.nodes.find(n => n.id === action.nodeID);\n    }\n    return {\n      ...state,\n      tableExpandNodeID: action.nodeID,\n      highlightingNode: newHighlightingNode,\n      secondHighlightingNodeID: null,\n    };\n  }\n  case 'SEARCH_SET_IS_SEARCHING_STATUS': {\n    return {\n      ...state,\n      isSearching: action.isSearching,\n    };\n  }\n  case 'SEARCH_RESULT_UPDATED': {\n    return {\n      ...state,\n      searchResult: action.searchResult,\n      matchedNodeIDs: action.searchResultSummary.generalMatchedNodeIDs,\n      matchedNodeIDsInNameAndDescription:\n        action.searchResultSummary.matchedNodeIDsInNameAndDescription,\n      matchedNodeIDsInProperties: action.searchResultSummary.matchedNodeIDsInProperties,\n      isGraphView: true,\n      isSearchMode: true,\n      highlightingMatchedNodeID: null,\n      highlightingMatchedNodeOpened: false,\n      highlightingNode: null,\n      secondHighlightingNodeID: null,\n      tableExpandNodeID: null,\n    };\n  }\n  case 'SEARCH_CLEAR_HISTORY': {\n    return {\n      ...state,\n      searchHistoryItems: clearSearchHistoryItems(),\n    };\n  }\n  case 'SEARCH_HISTORY_ITEM_CREATED': {\n    return {\n      ...state,\n      searchHistoryItems: addSearchHistoryItems(action.searchHistoryItem),\n    };\n  }\n  case 'GRAPH_NODES_SVG_ELEMENTS_UPDATED': {\n    return {\n      ...state,\n      graphNodesSVGElements: action.graphNodesSVGElements,\n    };\n  }\n  case 'SEARCH_RESULT_CLEARED': {\n    return {\n      ...state,\n      searchResult: [],\n      matchedNodeIDs: [],\n      currentSearchKeyword: '',\n      isSearchMode: false,\n      highlightingMatchedNodeID: null,\n      highlightingMatchedNodeOpened: false,\n    };\n  }\n  case 'SEARCH_SAVE_CURRENT_KEYWORD': {\n    return {\n      ...state,\n      currentSearchKeyword: action.keyword,\n    };\n  }\n  case 'GRAPH_MATCHED_NODE_OPENED': {\n    return {\n      ...state,\n      highlightingMatchedNodeOpened: action.opened,\n    };\n  }\n  default:\n    return state;\n  }\n};\n\nexport default ddgraph;\n","import { combineReducers } from 'redux';\n\nimport ddgraph from './DataDictionary/reducers';\n\nexport const getFileNodes = dictionary => Object.keys(dictionary).filter(node => dictionary[node].category === 'data_file');\nexport const getNodeTypes = dictionary => Object.keys(dictionary).filter(node => node.charAt(0) !== '_');\n\nconst versionInfo = (state = {}, action) => {\n    switch (action.type) {\n    case 'RECEIVE_VERSION_INFO':\n        return { ...state,\n        dictionaryVersion: action.data.dictionary.version || 'unknown',\n        apiVersion: action.data.version || 'unknown',\n        };\n    default:\n        return state;\n    }\n};\n\nconst excludeSystemProperties = (node) => {\n    const properties = node.properties && Object.keys(node.properties)\n        .filter(key => (node.systemProperties ? !node.systemProperties.includes(key) : true))\n        .reduce((acc, key) => {\n        acc[key] = node.properties[key];\n        return acc;\n        }, {});\n    return properties;\n};\n\nconst getDictionaryWithExcludeSystemProperties = (dictionary) => {\n    const ret = Object.keys(dictionary)\n        .map((nodeID) => {\n        const node = dictionary[nodeID];\n        if (!node.properties) return node;\n        return {\n            ...node,\n            properties: excludeSystemProperties(node),\n        };\n        })\n        .reduce((acc, node) => {\n        acc[node.id] = node;\n        return acc;\n        }, {});\n    return ret;\n};\n\nconst submission = (state = {}, action) => {\n  switch (action.type) {\n  case 'REQUEST_UPLOAD':\n    return { ...state, file: action.file, file_type: action.file_type };\n  case 'UPDATE_FILE':\n    return { ...state, file: action.file, file_type: action.file_type };\n  case 'UPDATE_FORM_SCHEMA':\n    return { ...state, formSchema: { ...state.formSchema, ...action.formSchema } };\n  case 'RECEIVE_PROJECTS':\n    return { ...state,\n      projects: action.data.reduce((map, p) => {\n        const res = map;\n        res[p.code] = p.project_id; return res;\n      }, {}),\n      projectAvail: action.data.reduce((map, p) => {\n        const res = map;\n        res[p.project_id] = p.availability_type; return res;\n      }, {}),\n    };\n  case 'RECEIVE_NODE_TYPES':\n    return { ...state, nodeTypes: action.data };\n  case 'RECEIVE_DICTIONARY':\n    return { ...state,\n      dictionary: getDictionaryWithExcludeSystemProperties(action.data),\n      nodeTypes: getNodeTypes(action.data),\n      file_nodes: getFileNodes(action.data),\n    };\n  case 'RECEIVE_AUTHORIZATION_URL':\n    return { ...state, oauth_url: action.url };\n  case 'RECEIVE_SUBMISSION_LOGIN':\n    return { ...state, login: state.result, error: state.error };\n  case 'RECEIVE_SUBMISSION': {\n    const prevCounts = ('submit_entity_counts' in state) ? state.submit_entity_counts : {};\n    const newCounts = (action.data.entities || [])\n      .map(ent => ent.type || 'unknown')\n      .reduce((db, type) => {\n        const res = db; res[type] = (res[type] || 0) + 1;\n        return res;\n      }, prevCounts);\n    const data = state.submit_result ?\n      state.submit_result.concat(action.data.entities || [])\n      : action.data.entities;\n    const status = state.submit_status ?\n      Math.max(state.submit_status, action.submit_status)\n      : action.submit_status;\n    return { ...state,\n      submit_entity_counts: newCounts,\n      submit_result: data,\n      submit_result_string: state.submit_result_string.concat(JSON.stringify(action.data, null, '    ')).concat('\\n\\n'),\n      submit_status: status,\n      submit_counter: state.submit_counter + 1,\n      submit_total: action.total };\n  }\n  case 'SUBMIT_SEARCH_FORM':\n    return { ...state, search_form: action.data };\n  case 'RECEIVE_SEARCH_ENTITIES':\n    return { ...state, search_result: action.data, search_status: action.search_status };\n  case 'RECEIVE_COUNTS':\n    return { ...state,\n      counts_search: action.data,\n      links_search: Object.entries(action.data)\n        .reduce((acc, entry) => { acc[entry[0]] = entry[1].length; return acc; }, {}),\n    };\n  case 'CLEAR_COUNTS':\n    return { ...state, counts_search: null, links_search: null };\n  case 'RECEIVE_UNMAPPED_FILES':\n    return { ...state, unmappedFiles: action.data };\n  case 'RECEIVE_UNMAPPED_FILE_STATISTICS':\n    return {\n      ...state,\n      unmappedFileCount: action.data.count,\n      unmappedFileSize: action.data.totalSize,\n    };\n  case 'RECEIVE_FILES_TO_MAP':\n    return { ...state, filesToMap: action.data };\n  case 'RESET_SUBMISSION_STATUS':\n    return { ...state,\n      submit_entity_counts: [],\n      submit_result: null,\n      submit_result_string: '',\n      submit_status: 0,\n      submit_counter: 0,\n      submit_total: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nconst reducers = combineReducers({ \n   submission,\n   ddgraph,\n   versionInfo\n});\n\nexport default reducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport ReduxDataDictionary from './DataDictionary';\nimport reducers from './reducers'\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\n\nconst version = {\"commit\":\"913161064b02bcef024d072873e77c8c79cc1a68\",\"dictionary\":{\"commit\":\"520a25999fd183f6c5b7ddef2980f3e839517da5\",\"version\":\"0.2.1-9-g520a259\"},\"version\":\"4.0.0-44-g9131610\"};\n\nconst findObjectWithRef = (obj, updateFn, root_key = '', level = 0) => {\n  // iterate over the properties\n  for (var propertyName in obj) {\n\n    if ( level === 0 ) root_key = propertyName;\n\n    if ( propertyName === '$ref' ) {\n      obj['$ref'] = updateFn(obj['$ref'], root_key);\n    }\n\n    // any object that is not a simple value\n    if (obj[propertyName] !== null && typeof obj[propertyName] === 'object') {\n      // recurse into the object and write back the result to the object graph\n      obj[propertyName] = findObjectWithRef(obj[propertyName], updateFn, root_key, (level + 1));\n    }\n  }\n  \n  return obj;\n};\n\n// unresolveable:\n// {$ref: \"_terms.yaml#/file_format\"}\n// {$ref: \"#/UUID\"}\n\nasync function init() {\n  const store = createStore(reducers);\n\n  let url = './default/schema.json';\n\n  if ( window.location.hash ) url = window.location.hash.slice(1);\n\n  // Fetch S3 schema.jsob\n  let response = await fetch(url);\n  let schema = await response.json();\n\n  // Remove .yaml extension from keys \n  let dict = {};  \n  for (let [key, value] of Object.entries(schema)) {\n    dict[key.slice(0, -5)] = value;\n  }\n\n  // Recursivly fix references\n  dict = findObjectWithRef(dict, (refObj, rootKey)=> { // This halts for sub objects./...\n\n    if ( refObj.includes('.yaml') ) {\n\n      // ABS_FIX\n      // \"$ref\": \"_definitions.yaml#/ubiquitous_properties\",\n      // ->\n      // \"$ref\": \"#/_definitions/ubiquitous_properties\",\n\n      refObj = \"#/\" + refObj.replace('.yaml#', '');\n      console.log(\"ABS FIX -- \" + rootKey + \": \" + refObj);\n\n    } else {\n\n      // REL FIX\n      // \"$ref\": \"#/state\"\n      // ->\n      // \"$ref\": \"#/{_definitions aka root key}/state\"\n\n      refObj = '#/' + rootKey + '/' + refObj.replace('#/', '');\n      console.log(\"REL FIX -- \" + rootKey + \": \" + refObj);\n    }\n\n\n    return refObj;\n  });\n\n  // Append metaschema TODO?? Doesn't seem to matter anymore\n\n  // This is a HACK FIX ME!!@!!!\n  dict['_terms']['file_format'] = {description: 'wut'};\n\n  let newDict = await $RefParser.dereference(dict, {\n    continueOnError: false,            // Don't throw on the first error\n    dereference: {\n      circular: true                 // Don't allow circular $refs\n    }\n  });\n\n  await Promise.all(\n    [\n      store.dispatch({\n        type: 'RECEIVE_DICTIONARY',\n        data: newDict\n      }),\n      store.dispatch({\n        type: 'RECEIVE_VERSION_INFO',\n        data: version\n      })\n    ],\n  );\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <ReduxDataDictionary />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}